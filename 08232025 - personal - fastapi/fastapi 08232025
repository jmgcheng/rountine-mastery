fastapi 08232025

with simple angular(can be replaced/improved)


---------------------------------------------
Project Setup
---------------------------------------------
mkdir fastapi_project01
cd fastapi_project01


# Create virtual environment
python -m venv venv
venv\Scripts\activate      # (Windows)

# Install FastAPI + Uvicorn server
pip install fastapi uvicorn

# Install database + ORM
pip install sqlalchemy psycopg2-binary alembic

# For password hashing + JWT auth
pip install passlib[bcrypt] python-jose

# For Pydantic data validation
pip install pydantic[email]

#
pip install alembic

#
pip install python-multipart
pip install pydantic-settings

# Freeze dependencies
pip freeze > requirements.txt








---------------------------------------------
Project Layout (Django-like)
---------------------------------------------
fastapi_blog/
│
├── core/                # main app (like Django project)
│   ├── database.py      # DB setup
│   ├── config.py        # settings
│   └── main.py          # entrypoint
│
├── accounts/            # user registration, login
│   ├── models.py
│   ├── schemas.py
│   ├── routes.py
│   ├── crud.py
│   ├── utils.py
│   └── auth.py
│
├── posts/               # blog posts
│   ├── models.py
│   ├── schemas.py
│   ├── routes.py
│   ├── crud.py
│
├── pages/               # static-like pages (about, homepage API)
│   └── routes.py
│
├── alembic/             # for migrations (like makemigrations/migrate)
└── requirements.txt




---------------------------------------------
create database
---------------------------------------------
CREATE DATABASE fastapidb01;
CREATE USER fastapi_user WITH PASSWORD 'mypassword';
GRANT ALL PRIVILEGES ON DATABASE fastapidb01 TO fastapi_user;
\c fastapidb01

-- Grant usage and create privileges on schema `public` to your user
GRANT ALL PRIVILEGES ON SCHEMA public TO fastapi_user;

-- Make sure the user can create tables in `public`
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO fastapi_user;



---------------------------------------------
core/config.py
---------------------------------------------
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    DATABASE_URL: str = "postgresql+psycopg2://fastapi_user:mypassword@localhost:5432/fastapidb01"
    SECRET_KEY: str = "supersecretkey"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30

    class Config:
        env_file = ".env"

settings = Settings()



---------------------------------------------
core/database.py
---------------------------------------------
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from core.config import settings

# Engine
engine = create_engine(settings.DATABASE_URL)

# Session
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base (all models will inherit from this)
Base = declarative_base()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



---------------------------------------------
accounts/models.py
---------------------------------------------
from sqlalchemy import Column, Integer, String
from core.database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, index=True, nullable=False)
    email = Column(String(100), unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)



---------------------------------------------
accounts/schemas.py
---------------------------------------------
from pydantic import BaseModel, EmailStr

class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str

class UserOut(BaseModel):
    id: int
    username: str
    email: EmailStr
    class Config:
        from_attributes = True

class UserLogin(BaseModel):
    username: str
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str



---------------------------------------------
accounts/utils.py
---------------------------------------------
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str):
    return pwd_context.hash(password)

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)



---------------------------------------------
accounts/crud.py
---------------------------------------------
from sqlalchemy.orm import Session
from accounts import models, schemas
from accounts.utils import hash_password

def create_user(db: Session, user: schemas.UserCreate):
    db_user = models.User(
        username=user.username,
        email=user.email,
        hashed_password=hash_password(user.password)
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

def get_user_by_username(db: Session, username: str):
    return db.query(models.User).filter(models.User.username == username).first()



---------------------------------------------
accounts/routes.py
---------------------------------------------
from fastapi import APIRouter, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from datetime import timedelta
from sqlalchemy.orm import Session
from core.database import get_db
from accounts import schemas, crud
from accounts.auth import create_access_token
from accounts.utils import verify_password
from core.config import settings

router = APIRouter(prefix="/accounts", tags=["accounts"])

ACCESS_TOKEN_EXPIRE_MINUTES = settings.ACCESS_TOKEN_EXPIRE_MINUTES

@router.post("/register", response_model=schemas.UserOut)
def register(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = crud.get_user_by_username(db, user.username)
    if db_user:
        raise HTTPException(status_code=400, detail="Username already registered")
    return crud.create_user(db, user)


@router.post("/login", response_model=schemas.Token)
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = crud.get_user_by_username(db, form_data.username)
    if not user or not verify_password(form_data.password, user.hashed_password):
        raise HTTPException(status_code=401, detail="Invalid username or password")

    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(data={"sub": user.username}, expires_delta=access_token_expires)
    return {"access_token": access_token, "token_type": "bearer"}



---------------------------------------------
accounts/auth.py
---------------------------------------------
from datetime import datetime, timedelta
from jose import JWTError, jwt
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session

from core.config import settings
from core.database import get_db
from accounts import models, crud, utils

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="accounts/login")

SECRET_KEY = settings.SECRET_KEY
ALGORITHM = settings.ALGORITHM
ACCESS_TOKEN_EXPIRE_MINUTES = settings.ACCESS_TOKEN_EXPIRE_MINUTES

def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    user = crud.get_user_by_username(db, username=username)
    if user is None:
        raise credentials_exception
    return user



---------------------------------------------
posts/models.py
---------------------------------------------
from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime, func
from sqlalchemy.orm import relationship
from core.database import Base

class Post(Base):
    __tablename__ = "posts"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(200), nullable=False)
    content = Column(Text, nullable=False)
    author_id = Column(Integer, ForeignKey("users.id"))
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())



---------------------------------------------
posts/schemas.py
---------------------------------------------
from pydantic import BaseModel
from datetime import datetime

class PostCreate(BaseModel):
    title: str
    content: str

class PostOut(BaseModel):
    id: int
    title: str
    content: str
    created_at: datetime
    updated_at: datetime
    class Config:
        from_attributes = True



---------------------------------------------
posts/crud.py
---------------------------------------------
from sqlalchemy.orm import Session
from posts import models, schemas

def create_post(db: Session, post: schemas.PostCreate, user_id: int):
    db_post = models.Post(**post.dict(), author_id=user_id)
    db.add(db_post)
    db.commit()
    db.refresh(db_post)
    return db_post

def get_posts(db: Session):
    return db.query(models.Post).order_by(models.Post.created_at.desc()).all()



---------------------------------------------
posts/routes.py
---------------------------------------------
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from core.database import get_db
from posts import schemas, crud
from accounts.auth import get_current_user
from accounts.models import User
from posts.models import Post

router = APIRouter(prefix="/posts", tags=["posts"])

@router.get("/", response_model=list[schemas.PostOut])
def list_posts(db: Session = Depends(get_db)):
    return crud.get_posts(db)

@router.post("/", response_model=schemas.PostOut)
def create_post(
    post: schemas.PostCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return crud.create_post(db, post, user_id=current_user.id)

@router.put("/{post_id}", response_model=schemas.PostOut)
def update_post(
    post_id: int,
    post: schemas.PostCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    db_post = db.query(Post).filter(Post.id == post_id).first()
    if db_post is None:
        raise HTTPException(status_code=404, detail="Post not found")
    if db_post.author_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not allowed to edit this post")

    db_post.title = post.title
    db_post.content = post.content
    db.commit()
    db.refresh(db_post)
    return db_post

@router.delete("/{post_id}")
def delete_post(
    post_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    db_post = db.query(Post).filter(Post.id == post_id).first()
    if db_post is None:
        raise HTTPException(status_code=404, detail="Post not found")
    if db_post.author_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not allowed to delete this post")

    db.delete(db_post)
    db.commit()
    return {"message": "Post deleted"}


@router.get("/{post_id}", response_model=schemas.PostOut)
def get_post(post_id: int, db: Session = Depends(get_db)):
    post = db.query(Post).filter(Post.id == post_id).first()
    if not post:
        raise HTTPException(status_code=404, detail="Post not found")
    return post






---------------------------------------------
pages/routes.py
---------------------------------------------
from fastapi import APIRouter

router = APIRouter(tags=["pages"])

@router.get("/")
def homepage():
    return {"message": "Welcome to FastAPI Blog"}

@router.get("/about")
def about():
    return {"message": "This is the about page"}



---------------------------------------------
core/main.py
---------------------------------------------
from fastapi import FastAPI
from accounts import routes as accounts_routes
from posts import routes as posts_routes
from pages import routes as pages_routes
from core.database import Base, engine
from fastapi.middleware.cors import CORSMiddleware

# Create tables (like makemigrations + migrate for now)
Base.metadata.create_all(bind=engine)

app = FastAPI(title="FastAPI Blog")

app.include_router(accounts_routes.router)
app.include_router(posts_routes.router)
app.include_router(pages_routes.router)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # or restrict to your frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)



---------------------------------------------
Initialize Alembic
---------------------------------------------
In your project root:
alembic init alembic
This creates an alembic/ folder and alembic.ini




---------------------------------------------
Configure Alembic
---------------------------------------------
-
	Open alembic.ini, find:
	sqlalchemy.url = driver://user:pass@localhost/dbname
	Replace with your database URL:
	sqlalchemy.url = postgresql+psycopg2://fastapi_user:mypassword@localhost:5432/fastapidb01



or



-

	Or, better: load from core/config.py. In alembic/env.py:

	import sys, os
	sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

	from core.database import Base, engine
	from accounts.models import User
	from posts.models import Post

	target_metadata = Base.metadata



---------------------------------------------
alembic/env.py
---------------------------------------------
...

from core.database import Base  # adjust path if needed
from accounts import models as accounts_models
from posts import models as posts_models
...
# target_metadata = None
target_metadata = Base.metadata
...



---------------------------------------------
Make Migrations
---------------------------------------------
alembic revision --autogenerate -m "create users and posts"




---------------------------------------------
Apply Migrations
---------------------------------------------
alembic upgrade head




---------------------------------------------
Run Server
---------------------------------------------
uvicorn core.main:app --reload



Go to:
http://127.0.0.1:8000/docs → Swagger UI with all endpoints.
	use authorize button in the UI to login with bearer properly
http://127.0.0.1:8000/ → homepage API.
POST /accounts/register → register user.
POST /posts/ → create post (currently hardcoded user_id=1).
GET /posts/ → list posts.






---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------
npm i -g @angular/cli








---------------------------------------------
Create Angular app
---------------------------------------------
ng new fastapi-blog-ui --routing --style=scss
cd fastapi-blog-ui







---------------------------------------------
src/environments/environment.ts
---------------------------------------------
export const environment = {
  production: false,
  apiUrl: 'http://127.0.0.1:8000', // FastAPI base
};








---------------------------------------------
src/environments/environment.prod.ts
---------------------------------------------
export const environment = {
  production: true,
  apiUrl: 'https://your-prod-api.example.com',
};









---------------------------------------------
proxy.conf.json
---------------------------------------------
{
  "/api": {
    "target": "http://127.0.0.1:8000",
    "secure": false,
    "changeOrigin": true,
    "pathRewrite": { "^/api": "" }
  }
}







---------------------------------------------
Generate building blocks
---------------------------------------------
# services
ng g s core/services/auth
ng g s core/services/posts

# interceptor (adds Authorization: Bearer <token>)
ng g interceptor core/interceptors/auth

# guard to protect routes (create/edit)
ng g guard core/guards/auth --functional

# components (standalone)
ng g c features/auth/login --standalone --flat --skip-tests
ng g c features/auth/register --standalone --flat --skip-tests
ng g c features/posts/post-list --standalone --flat --skip-tests
ng g c features/posts/post-form --standalone --flat --skip-tests
ng g c features/posts/post-detail --standalone --flat --skip-tests










---------------------------------------------
src/app/app.routes.ts
---------------------------------------------
import { Routes } from '@angular/router';
import { LoginComponent } from './features/auth/login.component';
import { RegisterComponent } from './features/auth/register.component';
import { PostListComponent } from './features/posts/post-list.component';
import { PostFormComponent } from './features/posts/post-form.component';
import { PostDetailComponent } from './features/posts/post-detail.component';
import { authGuard } from './core/guards/auth.guard';

export const routes: Routes = [
  { path: '', component: PostListComponent },
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },

  { path: 'posts/new', component: PostFormComponent, canActivate: [authGuard] },
  { path: 'posts/:id', component: PostDetailComponent },
  { path: 'posts/:id/edit', component: PostFormComponent, canActivate: [authGuard] },

  { path: '**', redirectTo: '' },
];










---------------------------------------------
src/app/app.component.ts
---------------------------------------------
import { Component, computed, inject } from '@angular/core';
import { RouterLink, RouterOutlet } from '@angular/router';
import { AuthService } from './core/services/auth.service';
import { NgIf } from '@angular/common';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, RouterLink, NgIf],
  template: `
    <nav class="nav">
      <a routerLink="/">Posts</a>
      <span class="spacer"></span>
      <ng-container *ngIf="isLoggedIn(); else authLinks">
        <button (click)="logout()">Logout</button>
      </ng-container>
      <ng-template #authLinks>
        <a routerLink="/login">Login</a>
        <a routerLink="/register">Register</a>
      </ng-template>
    </nav>
    <main class="container"><router-outlet /></main>
  `,
  styles: [`
    .nav { display:flex; gap:1rem; padding:1rem; border-bottom:1px solid #eee; }
    .spacer { flex:1; }
    .container { padding: 1rem; max-width: 800px; margin: 0 auto; }
    a { text-decoration:none; }
  `]
})
export class AppComponent {
  private auth = inject(AuthService);
  isLoggedIn = () => this.auth.isAuthenticated();

  logout() {
    this.auth.logout();
  }
}













---------------------------------------------
src/main.ts
---------------------------------------------
import { bootstrapApplication } from '@angular/platform-browser';
import { provideRouter } from '@angular/router';
import { provideHttpClient, withInterceptors } from '@angular/common/http';
import { AppComponent } from './app/app.component';
import { routes } from './app/app.routes';
import { authInterceptor } from './app/core/interceptors/auth.interceptor';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(routes),
    provideHttpClient(withInterceptors([authInterceptor])),
  ],
}).catch(err => console.error(err));










---------------------------------------------
src/app/core/services/auth.service.ts
---------------------------------------------
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { environment } from '../../../environments/environment';
import { Observable, tap } from 'rxjs';

interface TokenResponse {
  access_token: string;
  token_type: string;
}

interface RegisterPayload {
  username: string;
  email: string;
  password: string;
}

@Injectable({ providedIn: 'root' })
export class AuthService {
  private api = environment.apiUrl;
  private tokenKey = 'token';

  constructor(private http: HttpClient) {}

  register(payload: RegisterPayload): Observable<any> {
    return this.http.post(`${this.api}/accounts/register`, payload);
  }

  login(username: string, password: string): Observable<TokenResponse> {
    const body = new HttpParams()
      .set('username', username)
      .set('password', password);

    const headers = new HttpHeaders({
      'Content-Type': 'application/x-www-form-urlencoded',
    });

    return this.http.post<TokenResponse>(`${this.api}/accounts/login`, body.toString(), { headers })
      .pipe(tap(res => this.setToken(res.access_token)));
  }

  setToken(token: string) {
    localStorage.setItem(this.tokenKey, token);
  }

  getToken(): string | null {
    return localStorage.getItem(this.tokenKey);
  }

  isAuthenticated(): boolean {
    return !!this.getToken();
  }

  logout() {
    localStorage.removeItem(this.tokenKey);
    // Optional: navigate to home
  }
}












---------------------------------------------
src/app/core/interceptors/auth.interceptor.ts
---------------------------------------------
import { HttpInterceptorFn } from '@angular/common/http';

export const authInterceptor: HttpInterceptorFn = (req, next) => {
  const token = localStorage.getItem('token');
  if (token) {
    const authReq = req.clone({
      setHeaders: { Authorization: `Bearer ${token}` }
    });
    return next(authReq);
  }
  return next(req);
};













---------------------------------------------
src/app/core/guards/auth.guard.ts
---------------------------------------------
import { CanActivateFn, Router } from '@angular/router';

export const authGuard: CanActivateFn = (route, state) => {
  const token = localStorage.getItem('token');
  if (token) return true;

  const router = new Router();
  router.navigateByUrl('/login');
  return false;
};



			If the Router constructor complains (depends on CLI version), switch to:

			import { inject } from '@angular/core';
			import { Router } from '@angular/router';
			export const authGuard: CanActivateFn = () => {
			  const token = localStorage.getItem('token');
			  const router = inject(Router);
			  if (token) return true;
			  router.navigateByUrl('/login');
			  return false;
			};









---------------------------------------------
src/app/core/services/posts.service.ts
---------------------------------------------
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from '../../../environments/environment';
import { Observable } from 'rxjs';

export interface Post {
  id: number;
  title: string;
  content: string;
  created_at: string;
  updated_at: string;
}

export interface PostCreate {
  title: string;
  content: string;
}

@Injectable({ providedIn: 'root' })
export class PostsService {
  private api = environment.apiUrl;

  constructor(private http: HttpClient) {}

  list(): Observable<Post[]> {
    return this.http.get<Post[]>(`${this.api}/posts/`);
  }

  detail(id: number): Observable<Post> {
    return this.http.get<Post>(`${this.api}/posts/${id}`);
  }

  create(payload: PostCreate): Observable<Post> {
    return this.http.post<Post>(`${this.api}/posts/`, payload);
  }

  update(id: number, payload: PostCreate): Observable<Post> {
    return this.http.put<Post>(`${this.api}/posts/${id}`, payload);
  }

  delete(id: number): Observable<any> {
    return this.http.delete(`${this.api}/posts/${id}`);
  }
}






---------------------------------------------
src/app/features/auth/login.component.ts
---------------------------------------------
import { Component, inject } from '@angular/core';
import { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';
import { AuthService } from '../../core/services/auth.service';
import { Router } from '@angular/router';
import { NgIf } from '@angular/common';

@Component({
  standalone: true,
  selector: 'app-login',
  imports: [ReactiveFormsModule, NgIf],
  template: `
    <h2>Login</h2>
    <form [formGroup]="form" (ngSubmit)="submit()">
      <label>Username</label>
      <input formControlName="username" />
      <label>Password</label>
      <input type="password" formControlName="password" />
      <button [disabled]="form.invalid || loading">Login</button>
      <p *ngIf="error" style="color:red">{{error}}</p>
    </form>
  `
})
export class LoginComponent {
  private fb = inject(FormBuilder);
  private auth = inject(AuthService);
  private router = inject(Router);

  loading = false;
  error = '';

  form = this.fb.group({
    username: ['', Validators.required],
    password: ['', Validators.required],
  });

  submit() {
    if (this.form.invalid) return;
    this.loading = true;
    this.error = '';
    const { username, password } = this.form.value;
    this.auth.login(username!, password!).subscribe({
      next: () => {
        this.loading = false;
        this.router.navigateByUrl('/');
      },
      error: (err) => {
        this.loading = false;
        this.error = err?.error?.detail || 'Login failed';
      }
    });
  }
}










---------------------------------------------
src/app/features/auth/register.component.ts
---------------------------------------------
import { Component, inject } from '@angular/core';
import { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';
import { AuthService } from '../../core/services/auth.service';
import { Router } from '@angular/router';
import { NgIf } from '@angular/common';

@Component({
  standalone: true,
  selector: 'app-register',
  imports: [ReactiveFormsModule, NgIf],
  template: `
    <h2>Register</h2>
    <form [formGroup]="form" (ngSubmit)="submit()">
      <label>Username</label>
      <input formControlName="username" />
      <label>Email</label>
      <input formControlName="email" />
      <label>Password</label>
      <input type="password" formControlName="password" />
      <button [disabled]="form.invalid || loading">Create Account</button>
      <p *ngIf="error" style="color:red">{{error}}</p>
    </form>
  `
})
export class RegisterComponent {
  private fb = inject(FormBuilder);
  private auth = inject(AuthService);
  private router = inject(Router);

  loading = false;
  error = '';

  form = this.fb.group({
    username: ['', Validators.required],
    email: ['', [Validators.required, Validators.email]],
    password: ['', Validators.required],
  });

  submit() {
    if (this.form.invalid) return;
    this.loading = true;
    this.error = '';
    this.auth.register(this.form.value as any).subscribe({
      next: () => {
        this.loading = false;
        this.router.navigateByUrl('/login');
      },
      error: (err) => {
        this.loading = false;
        this.error = err?.error?.detail || 'Registration failed';
      }
    });
  }
}











---------------------------------------------
src/app/features/posts/post-list.component.ts
---------------------------------------------
import { Component, inject } from '@angular/core';
import { PostsService, Post } from '../../core/services/posts.service';
import { AsyncPipe, NgFor, DatePipe, NgIf } from '@angular/common';
import { RouterLink } from '@angular/router';
import { AuthService } from '../../core/services/auth.service';

@Component({
  standalone: true,
  selector: 'app-post-list',
  imports: [NgFor, AsyncPipe, DatePipe, RouterLink, NgIf],
  template: `
    <div class="header">
      <h2>All Posts</h2>
      <a *ngIf="auth.isAuthenticated()" routerLink="/posts/new">Create Post</a>
    </div>
    <ul>
      <li *ngFor="let p of posts">
        <a [routerLink]="['/posts', p.id]">{{ p.title }}</a>
        <small> • {{ p.created_at | date:'short' }}</small>
      </li>
    </ul>
  `,
  styles: [`.header{display:flex;justify-content:space-between;align-items:center;}`]
})
export class PostListComponent {
  private postsService = inject(PostsService);
  auth = inject(AuthService);
  posts: Post[] = [];

  ngOnInit() {
    this.postsService.list().subscribe(res => this.posts = res);
  }
}














---------------------------------------------
src/app/features/posts/post-form.component.ts
---------------------------------------------
import { Component, inject } from '@angular/core';
import { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';
import { PostsService } from '../../core/services/posts.service';
import { ActivatedRoute, Router } from '@angular/router';
import { NgIf } from '@angular/common';

@Component({
  standalone: true,
  selector: 'app-post-form',
  imports: [ReactiveFormsModule, NgIf],
  template: `
    <h2>{{ isEdit ? 'Edit Post' : 'New Post' }}</h2>
    <form [formGroup]="form" (ngSubmit)="submit()">
      <label>Title</label>
      <input formControlName="title" />
      <label>Content</label>
      <textarea rows="6" formControlName="content"></textarea>
      <button [disabled]="form.invalid || loading">{{ isEdit ? 'Update' : 'Create' }}</button>
      <p *ngIf="error" style="color:red">{{error}}</p>
    </form>
  `
})
export class PostFormComponent {
  private fb = inject(FormBuilder);
  private posts = inject(PostsService);
  private route = inject(ActivatedRoute);
  private router = inject(Router);

  isEdit = false;
  postId?: number;
  loading = false;
  error = '';

  form = this.fb.group({
    title: ['', Validators.required],
    content: ['', Validators.required],
  });

  ngOnInit() {
    const idParam = this.route.snapshot.paramMap.get('id');
    if (idParam) {
      this.isEdit = true;
      this.postId = +idParam;
      // Optional: fetch detail and patch form if you expose GET /posts/:id
      // this.posts.detail(this.postId).subscribe(p => this.form.patchValue({ title: p.title, content: p.content }));
    }
  }

  submit() {
    if (this.form.invalid) return;
    this.loading = true;
    this.error = '';

    const payload = this.form.value as { title: string; content: string; };
    const obs = this.isEdit && this.postId
      ? this.posts.update(this.postId, payload)
      : this.posts.create(payload);

    obs.subscribe({
      next: () => {
        this.loading = false;
        this.router.navigateByUrl('/');
      },
      error: (err) => {
        this.loading = false;
        this.error = err?.error?.detail || 'Save failed';
      }
    });
  }
}













---------------------------------------------
src/app/features/posts/post-detail.component.ts
---------------------------------------------
import { Component, inject } from '@angular/core';
import { ActivatedRoute, RouterLink, Router } from '@angular/router';
import { PostsService, Post } from '../../core/services/posts.service';
import { NgIf } from '@angular/common';

@Component({
  standalone: true,
  selector: 'app-post-detail',
  imports: [NgIf, RouterLink],
  template: `
    <ng-container *ngIf="post; else loadingTpl">
      <h2>{{ post.title }}</h2>
      <p>{{ post.content }}</p>
      <p><small>Created: {{ post.created_at }}</small></p>
      <a [routerLink]="['/posts', post.id, 'edit']">Edit</a>
    </ng-container>
    <ng-template #loadingTpl>Loading...</ng-template>
  `
})
export class PostDetailComponent {
  private route = inject(ActivatedRoute);
  private router = inject(Router);
  private posts = inject(PostsService);

  post?: Post;

  ngOnInit() {
    const id = +(this.route.snapshot.paramMap.get('id') || 0);
    if (!id) { this.router.navigateByUrl('/'); return; }
    // Requires GET /posts/:id on the backend
    this.posts.detail(id).subscribe({
      next: p => this.post = p,
      error: () => this.router.navigateByUrl('/')
    });
  }
}












---------------------------------------------
Run it angular
---------------------------------------------
ng serve --open
# or with proxy:
# ng serve --proxy-config proxy.conf.json --open









---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







---------------------------------------------
---------------------------------------------







