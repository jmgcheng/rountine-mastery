Date: Jan 11 2024



> routine n - installation
	/*
		Notes:
	*/
	// download python
		python.org
	// install
		// add Python to PATH



> routine n - check python installation
	/*
		Notes:
	*/
	// cmd
		> python
		# exit interpreter
		ctrl + z



> routine n - test interpreter
	/*
		Notes:
	*/
	cmd
	python
	2 + 2
	2 > 1



> routine n - create your first program
	/*
		Notes:
	*/
	// create folder in desktop
	// open vscode in that folder
	// create new file
		app.py
	// code
		print('hello world')
		print('*' * 10)
	// run the code
		// open vscode terminal
		> python app.py
		// or run in cmd, same result



> routine n - install python extensions in vscode
	/*
		Notes:
			- improves
				- linting
				- autocompletion
				- unit testing
				- debugging
				- code formatting
				- code snippets
	*/
	// in vscode, open extensions tab in the left side bar
		- install
			- Python
			- pylint



> routine n - pylint issues
	/*
		Notes:
	*/
	// pylint Missing module docstring error
		- just add docstring above the file
			""" This file is for blah blah blah """

			print("hello world")
		- disable it if it gets too annoying



> routine n - install auto formatting python code autopep8
	/*
		Notes:
	*/
	// install autopep8 in extension
	// manual Format Document
		- ctrl + shift + p
		- Format Document
	// Auto Format Document when save
		> file > Preferences > Settings > search in searchbox "formatOnSave" > tick the checkbox



> routine n - comments - nnn
	/*
		Notes:
	*/
	# this is a comment



> routine n - output - nnn
	/*
		Notes:
	*/
	print('hello world')



> routine n - input() - nnn
	/*
		Notes:
	*/
	# ask user to input a name and assigned it to name variable
		name = input("Enter a name: ")



> routine n - variables - nnn
	/*
		Notes:
	*/
	# interger
		students_count = 1000
	# float
		rating = 4.99
	# boolean
		is_published = True
	# string
		course_name = "Python Programming"
	# create price variable and assign 10
		price = 10
	# create rating variable and assign 4.9
		rating = 4.9
	# create course_name variable and assign Python for Beginners
		course_name = 'Python for Beginners'
	# create is_published variable and assign True
		is_published = True	



> routine n - strings
	/*
		Notes:
	*/
	//
		course = "Python Programming"

	//
		email = """
			Dear Cheng,
				Apply na
			Thanks
		"""
	
	// get number of characters
		len(course)

	// access specific index
		course[0]
		# P
		course[-1]
		# g
		course[0:3]
		# Pyt
		print(course[0:])
		# Python Programming
		print(course[:3])
		# Pyt
		print(course[:])
		# Python Programming
		print(course[1:-1])
		# ython Programmin



> routine n - escape sequence
	/*
		Notes:
	*/
	course = "Python \"Programming\""



> routine n - is and in operators - nn
	/*
		Notes:
			is - identify operator, used to compare 2 objects and returns true if both are the same object
			in - membership operator, used to tell if the value is contained in a list or another sequence
	*/



> routine n - strings - notations, format
	/*
		Notes:
			isalpha() - check if a string contains only characters and is not empty
			isalnum() - check if a string contains characters or digits and is not empty
			isdecimal() - check if a string contains digits and is not empty
			lower() - get a lower version of a string
			islower() - check if a string is lowercase
			upper() - get an uppercase version of a string
			isupper() - check if a string is uppercase
			title() - get a capitalized version of a string
			startswith() - check if the string starts with a specific substring
			endswith() - check if the string ends with a specific substring
			replace() - replace a part of a string
			split() - split a string on a specific character seperator
			strip() - trim the whitespace from a sting
			join() - append new letters to a string
			find() - find the position of a substring		
	*/
	# create course variable and assign Python for Beginners
		course = 'Python for Beginners'
	# check if Python is in string course
		print('Python' in course)
	# returns the first character
		print(course[0])
	# returns the second character
		print(course[1])
	# returns the first character from the end
		print(course[-1]) 
	# returns the second character from the end
		print(course[-2])
	# returns Pyt
		print(course[0:3])
	# returns ython for Beginners
		print(course[1:])
	# returns Pytho
		print(course[:5])
	# returns ython for Beginner
		print(course[1:-1])
	# print and concat hi, hello
		print("hi " + "hello")
	# print Hi, my name is Cheng where Cheng is a variable
		name = 'Cheng'
		print(f'Hi, my name is {name}')
	# print course in upper() format
		print(course.upper())
	# print course in lower() format
		print(course.lower())
	# print course in title() format
		print(course.title())
	# returns the index of the first occurrence of p (or -1 if not found) 
		print(course.find('p'))
	# replace for with 4
		print(course.replace('for', '4'))
	# f and F same
		first = "Cheng"
		last = "Michael"
		full = first + " " + last
		full_again = f"{first} {last}"
		or 
		full = F"{first} {last}"



> routine n - len() - nnn
	/*
		Notes:
	*/
	# ask for users name then check its character length
		name = input("Name: ")
		length = len(name)
		#
			cheng
			5



> routine n - variables - type(x), isinstance(x, type)
	/*
		Notes:
	*/
	# create price variable and assign 10 and check its type
		price = 10
		print(type(price))
		#
			<class 'int'>
	# create name variable and assign cheng and check if its str
		name = 'cheng'
		print(isinstance(name, str))
		#
			True



> routine n - type casting
	/*
		Notes:
			int()
			str()
			float()
			bool()
			list()
			tuple()
			range()
			dict()
			set()
			complex()
	*/
	# ask user to input a age and assigned it to age variable. type cast it to int
		age = int(input("Enter age: "))



> routine n - arithmetic operations - nnn
	/*
		Notes:
	*/
		+
		-
		*
	# returns a float
		/ 
	# returns an int
		// 
	# returns the remainder of division
		% 
	# exponentiation - x ** y = x to the power of y
		** 



> routine n - augmented assignment operator - nnn
	/*
		Notes:
	*/
	# augment a variable
		x += 10



> routine n - negative number - nnn
	/*
		Notes:
	*/
	# print a negative number
		print(-1)



> routine n - Operator precedence - nnn
	/*
		Notes:
	*/
	1. parenthesis
	2. exponentiation
	3. multiplication / division
	4. addition / subtraction 



> routine n - numbers
	/*
		Notes:
	*/
	x = 1 // intergers
	x = 1.1 // float
	x = 1 + 2j # a + bi // complex numbers. Where i is the imagiary numbers
	print(10 / 3) // 3.333333333
	print(10 // 3 ) // 3



> routine n - some function for numbers
	/*
		Notes:
	*/
	round(2.9) // 3
	abs(-2.9) // 2.9
	//
		import math
		math.ceil(2.2) // 3




> routine n - boolean - nnn
	/*
		Notes:
	*/
	// false
		""
		0
		None
		bool("") // False
		bool(0) // False



> routine n - comparison operators
	/*
		Notes:
			a > b
			a >= b (greater than or equal to)
			a < b
			a <= b
			a == b (equals)
			a != b (not equals)
	*/
	10 > 3 // True
	10 >= 3 // True
	10 == "10" // False
	10 != "10" // True
	"bag" > "apple" // True
	"bag" == "BAG" // False



> routine n - if statements - nnn
	/*
		Notes:
	*/
	// if is_hot print hot day, else if is_cold print cold day, else print beautiful day
		if is_hot:
			print(“hot day”)
		elif is_cold:
			print(“cold day”)
		else:
			print(“beautiful day”) 	
	//
		temp = 35
		if temp > 30:
			print("It's warm")
			print("Drink water")
		elif temp > 20:
			print("It's nice")
		else:
			print("It's cold")
		print("Done")



> routine n - prog n
	/*
		Notes:
			- programs asks the user for the house price and if the buyer has good credit
			- 10% downpayment for good credit
			- 20% downpayment for bad credit
			- print how much the buyer should down
	*/
	house_price = float(input("Enter house price: "))
	is_good_credit = input("Does buyer have good credit (y/n): ").upper()
	if is_good_credit == 'Y':
	    print("Down payment: " + str(house_price * .10))
	elif is_good_credit == 'N':
	    print("Down payment: " + str(house_price * .20))
	else:
	    print("Credit not recognized")



> routine n - if statements - logical operators
	/*
		Notes:
			# and: both
			# or: at least one
			# not: inverse any boolean value		
	*/
	// create condition1 to True, condition2 to False	
		condition1 = True
		condition2 = False
		print(not condition1) # False
		print(condition1 and condition2) # False
		print(condition1 or condition2) # True

		print(0 or 1) # 1
		print(False or 'hey') # hey
		print('hi' or 'hey') # hi
		print([] or False) # False
		print(False or []) # []

		print(0 and 1) # 0
		print(1 and 0) # 0
		print(False and 'hey') # False
		print('hi' and 'hey') # hey
		print([] and False) # []
		print(False and []) # False
	//
		high_income = True
		good_credit = True
		if high_income and good_credit:
			print("Eligible")
		else:
			print("Not eligible")
	
	// 
		student = True
		if not student:
			print("Eligible")

	//
		if (high_income or good_credit) and not student:
			print("Eligible")



> routine n - global any function - nn
	/*
		Notes:
			- very useful when working with booleans
			- it returns true if any of the values of iterable, if any of them are true its gonna return true
	*/
	# create book_1_read var to True, book_2_read to False
		book_1_read = True
		book_2_read = False
	# use any global function
		print(any([book_1_read, book_2_read])) # True



> routine n - global all function - nn
	/*
		Notes:
			- 
	*/
	# create ingredients_purchased var to True, meal_cooked to False
		ingredients_purchased = True
		meal_cooked = False
	# use all global function
		print(all([ingredients_purchased, meal_cooked])) # False



> routine n - prog n
	/*
		Notes:
			- ask user if he has high income and good credit
			- print eligible for loan if he has both
	*/
	has_high_income = input("Applicant has high income (y/n): ").upper()
	has_good_credit = input("Applicant has good credit (y/n): ").upper()
	if has_high_income == 'Y' and has_good_credit == 'Y':
	    print("Eligible for loan")
	else:
	    print("Not Eligible for loan")



> routine n - prog n
	/*
		Notes:
			- create a program that ask the user's weight in kilo or lbs
			- convert his weight to the other unit
				- lbs = kg / .45
				- kg = lbs * .45
	*/
	weight = float(input("Enter your weight: "))
	unit = input("(k)g or (l)bs: ")
	if unit == "k":
		print("Your weight in lbs is: " + str(weight / .45))
	elif unit == "l":
		print("Your weight in kg is: " + str(weight * .45))
	else:
		print("Error")



> routine n - ternary operator
	/*
		Notes:
	*/
	//
		age = 22
		if age >= 18:
			message = "Eligible"
		else:
			message = "Not eligible"
	//
		message = "Eligible" if age >= 18 else "Not eligible"
	//
		def is_adult(age):
			if age > 18:
				return True
			else:
				return False
		# turn above into a ternary operator
		def is_adult2(age):
			return True if age > 18 else False	



> routine n - chaining comparison operators
	/*
		Notes:
	*/
	//
		age = 22
		if age >= 18 and age < 65:
			print("Eligible")

	//
		if 18 <= age < 65:
			print("Eligible")



> routine n - prog n
	/*
		Notes:
			- ask for users name then check its character length
			- print his name should not be less than 3 characters
			- print his name should not be more than 50 characters
			- else print looks good
	*/
	if length < 3:
		print(f'Name {name} should not be LESS than 3 characters')
	elif length > 50:
		print(f'Name {name} should not be MORE than 50 characters')
	else:
		print("name looks good!")



> routine n - range() - nnn
	/*
		Notes:
	*/
	range(5) 			
	# 
		0, 1, 2, 3, 4
	range(1, 5) 		
	# 
		1, 2, 3, 4
	range(1, 5, 2)		
	# 
		1, 3
	print(range(0, 5))
	# 
		range(0, 5)
	print(list(range(0, 5)))
	#
		[0, 1, 2, 3, 4]
	print(range(5))
	#
		range(0, 5)
	print(list(range(5)))
	#
		[0, 1, 2, 3, 4]
	print(range(1, 5))
	#
		range(1, 5)
	print(list(range(1, 5)))
	#
		[1, 2, 3, 4]
	print(range(1, 5, 2))
	#
		range(1, 5, 2)
	print(list(range(1, 5, 2)))
	# 
		[1, 3]



> routine n - iterables
	/*
		Notes:
	*/
	//
		print(type(5))
		// <class 'int'>

	//
		print(type(range(5)))
		// <class 'range'>

	//
		# range is iterable
		for x in range(5):

	// string is iterable
		for x in "Python":
			print(x)

	// list is iterable
		for x in [1, 2, 3, 4]:
			print(x)



> routine n - lists - nnn
	/*
		Notes:
			- their list is like an array in other language
			- take note python really has its own array but syntax is different
	*/
	// create a list of names
		names = ['jon', 'bob', 'cheng']
	// create a numbers variable and assign it a list from 1 to 5
		numbers = [1, 2, 3, 4, 5]
	// returns the first item
		numbers[0]
	// returns the second item
		numbers[1]
	// returns the first item from the end
		numbers[-1]
	// returns the second item from the end
		numbers[-2]
	// adds 6 to the end
		numbers.append(6) 
	// adds 6 at index position of 0	
		numbers.insert(0, 6) 
	// removes 6	
		numbers.remove(6) 
	// removes the last item	
		numbers.pop() 
	// removes all the items	
		numbers.clear() 
	// returns the index of first occurrence of 8	
		numbers.index(8) 
	// sorts the list	
		numbers.sort() 
	// reverses the list	
		numbers.reverse() 
	// returns a copy of the list 	
		numbers.copy() 
	// list
		letters = ['a', 'b', 'c']
		numbers = [1, 2, 3]
	// 2 dimensional list
		matrix = [[0, 1], [2, 3]]
	// list of a hundred 0
		zeros = [0] * 100
	// concatinate
		combined = zeros + letters
		// [0, 0, 0, 0, ..., 'a', 'b', 'c', ]
	// create a list from 0 to 19
		numbers = list(range(20))
	// 
		chars = list("hellow world")
		print(chars)
		# ['h', 'e', 'l', ...]
	//
		print(len(chars))
		# 11		



> routine n - accessing lists
	/*
		Notes:
	*/
	//
		letters = ['a', 'b', 'c', 'd']
		print(letters[0])
			// a
		print(letters[-1])
			// d
		letters[0] = 'A'
		print(letters)
			// ['A', 'b', ...]
		print(letters[0:3])
			// ['A', 'b', 'c']
		print(letters[:3])
			// ['A', 'b', 'c']
		print(letters[0:])
			// ['A', 'b', 'c', 'd']
		print(letters[:])
			// ['A', 'b', 'c', 'd']
			// get a copy of our original list
		print(letters[::2])
			// ['A', 'c']
	//
		numbers = list(range(20))
		print(numbers)
			// [0, ..., 19]
		print(numbers[::2])
			// [0, 2, 4, ..., 18]
		print(numbers[::-1])
			// [19, 18, 17, ..., 0]		



> routine n - list - 2 dimensional
	/*
		Notes:
	*/
	// loop a matrix
		matrix = [
			[1, 2, 3],
			[4, 5, 6],
			[7, 8, 9]
		]
		for row in matrix:
			for item in row:
				print(item)



> routine n - list unpacking
	/*
		Notes:
	*/
	// unpacking
		numbers = [1, 2, 3]
		first, second, third = numbers # just like destruct
		# you need to unpack the same qty
	// packing again
		numbers = [1, 2, 3, 4, 4, 4, 4]
		first, second, *other = numbers
		print(first)
			# 1
		print(other)
			# [3, 4, 4, 4, 4]
			# a list of the rest
	//
		numbers = [1, 2, 3, 4, 4, 4, 4, 9]
		first, *other, last = numbers
		print(first, last)
			# 1 9
		print(other)
			# [2, 3, 4, 4, 4, 4]				



> routine n - unpacking operator
	/*
		Notes:
			- unpack any iterables
	*/
	//
		numbers = [1, 2, 3]
		print(numbers)
		# [1, 2, 3]
		print(1, 2, 3)
		# 1 2 3
	//
		print(*numbers) # like spread operator
		# 1 2 3
	//
		values = list(range(5))
		print(values)
		#
			[0, 1, 2, 3, 4]
		values = [*range(5), *"Hello"]
		#
			[0, 1, 2, 3, 4, 'H', 'e', 'l', 'l', 'o']
	// unpacking dictionary needs 2 *
		first = {"x": 1}
		second = {"x": 10, "y": 2}
		combined = {**first, **second, "z": 1}
		print(combined)
		#
			{'x': 10, 'y': 2, 'z': 1}



> routine n - looping over list
	/*
		Notes:
	*/
	//
		letters = ['a', 'b', 'c']
		for letter in letters:
			print(letter)
		//
			a
			b
			c
	//
		letters = ['a', 'b', 'c']
		print(enumerate(letters)) # enumerate returns an enumerate object which is iterable
		//
			<enumerate object at 0x000001BD644F1EE0>
	//
		letters = ['a', 'b', 'c']
		for letter in enumerate(letters): # in each enumerate object will give us a tuple
			print(letter)
		//
			(0, 'a') # tupple
			(1, 'b')
			(2, 'c')
		//
			tupple is just like a list but its readonly
			(index, item)
	//
		letters = ['a', 'b', 'c']
		for letter in enumerate(letters): 
			print(letter[0], letter[1])
		//
			0 a
			1 b
			2 c
	// unpacking style
		letters = ['a', 'b', 'c']
		for index, letter in enumerate(letters): 
			print(index, letter)
		//
			0 a
			1 b
			2 c



> routine n - adding or removing items in list
	/*
		Notes:
	*/
	//
		letters = ['a', 'b', 'c']
	// add
		letters.append('d')
		print(letters)
		// ['a', 'b', 'c', 'd']
	// add specific position
		letters.insert(0, '-')
		print(letters)
		// ['-', 'a', 'b', 'c', 'd']
	// remove
		letters.pop()
		print(letters)
		// ['-', 'a', 'b', 'c']
	// remove
		letters.pop(0)
		print(letters)
		// ['a', 'b', 'c']
	// remove
		letters.remove('b') # remove the first occurence of b
		print(letters)
		// ['a', 'c']
	// remove
		del letters[0:3] # del you can remove a range of items
	// remove all
		letters.clear()



> routine n - finding items in list
	/*
		Notes:
	*/
	//
		letters = ['a', 'b', 'c']
		print(letters.index('a'))
			// 0
	//
		letters = ['a', 'b', 'c']
		print(letters.index('d'))
			// ValueError
	// 
		letters = ['a', 'b', 'c']
			if "d" in letters:
				print(letters.index('d'))
					// nothing to show
					// no error
	// 
		letters.count('d')
		// 0



> routine n - sorting lists
	/*
		Notes:
	*/
	//
		numbers = [3, 51, 2, 8, 6]
		numbers.sort()
		// [2, 3, 6, 8, 51]
	//
		numbers.sort(reverse=True)
		// [51, 8, ...]
	//
		sorted(numbers)
		[2, 3, 6, 8, 51]
	//
		sorted(numbers, reverse=True)
		// [51, 8, ...]
	//
		items = [
			("Product1", 10),
			("Product2", 9),
			("Product3", 12),
		]
		items.sort()
		print(items)
		//
			nothing change,
			python doesn't know how to sort this list
	//
		items = [
			("Product1", 10),
			("Product2", 9),
			("Product3", 12),
		]
		def sort_item(item):
			return item[1] # returns 10, 9, then 12
		items.sort(key=sort_item)
		print(items)
		//
			[
				("Product2", 9),
				("Product1", 10),
				("Product3", 12),
			]



> routine n - arrays
	/*
		Notes:
			- array(typecode, )
				- search google python 3 typecode
					- eg
						- 'i' - signed int
			- typecode
				- its a string of one character that determines the type of objects in your list
			- unlike list, every item in the list should be the same type as the typecode
			- use array if your only dealing with a large sequence of numbers and you encounter performance problems. For others, use list or tuples by default
	*/
	//
		from array import array
		numbers = array("i", [1, 2, 3])
		numbers.append(4)



> routine n - tuples - nnn
	/*
		Notes:
			- They are like read-only lists. 
			- We use them to store a list of items.
			- we cannot add or remove items or change the existing items. 
	*/
	// create a coordinates variable and assign a 1, 2, 3, Tuples
		coordinates = (1, 2, 3)
	// unpack the tuple using seperate variables. Destruct
		x, y, z = coordinates
	//
		point = (1, 2)
		point = 1, 2 # same
		point = 1, # trailing comma means still tuple
		point = () # empty tuple
	// concatinate tuple
		point = (1, 2) + (3, 4)
		print(point)
		#
			(1, 2, 3, 4)
	//
		point = (1, 2) * 3
		print(point)
		#
			(1, 2, 1, 2, 1, 2)
	// convert list to tuple
		point = tuple([1, 2])
	//
		point = tuple("hello")
		#
			('h', 'e', 'l', 'l', 'o')
	//
		point = (1, 2, 3)
		print(point[0:2])
		#
			(1, 2)
	// unpack
		point = (1, 2, 3)
		x, y, z = point
		if 10 in point:
			print('exists')
	//
		point[0] = 10
		#
			TypeError: tuple does not support assignment	



> routine n - swapping variables
	/*
		Notes:
	*/
	//
		x = 10
		y = 11
		x, y = y, x # this is a combination of tuple and unpacking(destruct)
		print('x', x)
			// x 11
		print('y', y)
			// y 11



> routine n - dictionaries - nnn
	/*
		Notes:
			- dictionaries are like the object in python
	*/
	// create a customer variable. Assign it a dictionary with name, age, is_verified as its keys
		customer = {
			“name”: “John Smith”,
			“age”: 30,
			“is_verified”: True
		}
	// print name of the customer
		print(customer[“name”] )
	// print type of the customer with default value using .get()
		print(customer.get(“type”, “silver”) )
	// create dog var. Assign it a dictionary with name as it key
		dog = {"name": "Roger"}
	// reassign dog name property to cheng or different value	
		dog["name"] = 'cheng'
	// print dog name
		print(dog["name"]) # cheng
	// print dog name using get()
		print(dog.get("name")) # cheng
	// print dog color using get() with default value	
		print(dog.get("color", "default color")) # default color
	// print and check if color in dog	
		print("color" in dog) # False
	// assign key favorite food in dog	
		dog["favorite food"] = "Meat"
	// make a copy of dog	
		dogCopy = dog.copy()
	// print keys() of dog	
		print(dog.keys()) # dict_keys(['name', 'favorite food'])
	// print keys() of dog typecast list	
		print(list(dog.keys())) # ['name', 'favorite food']
	// print values() of dog typecase list
		print(list(dog.values())) # ['cheng', 'Meat']
	// print dog len()
		print(len(dog)) # 2
	// print and pop() dog name
		print(dog.pop("name")) # cheng return and delete the item
	// del() dog favorite food
		del dog['favorite food']
	// print dog
		print(dog) # {}
	// print the copy of dog
		print(dogCopy) # {'name': 'cheng', 'favorite food': 'Meat'}
	//
		point = {"x": 1, "y": 2}
	//
		point = dict(x=1, y=2) # remember x=1 are called key arguments
	//
		print(point["x"])
		//
			1
	//
		point["x"] = 10
		print(point)
		//
			{'x': 10, 'y': 2}
	//
		point["z"] = 20
		print(point)
		//
			{'x': 10, 'y': 2, 'z': 20}
	//
		print(point.get("a"))
		//
			None
	//
		print(point.get("a", 0))
		//
			0
	//
		if "a" in point:
			print(point["a"])
	//
		del point["x"]
		print(point)
		//
			{'y': 2, 'z': 20}
	//
		for key in point:
			print(key, point[key])
			//
				y 2
				z 20
	//
		for x in point.items():
			print(x)
			//
				('y', 2)
				('z', 20)
	//
		for key, value in point.items():
			print(key, value)
			//
				y 2
				z 20		



> routine n - prog n
	/*
		Notes:
			- create the dictionary below
				dict = {
					"1": "One",
					"2": "Two",
					"3": "Three",
					"4": "Four"
				}
			- ask user to input a phone number from 1 to 4
			- program should output equivalent word of the number
			- use for loop
	*/	
	dict = {
		"1": "One",
		"2": "Two",
		"3": "Three",
		"4": "Four"
	}
	phone = input("Phone: ")
	output = ''
	for ch in phone:
		output += dict.get(ch, "!") + ' '
	print(output)



> routine n - sets - nnn
	/*
		Notes:
			- sets are unorder collection
				- means we can't get value by using index. eg item[0]		
	*/
	// create set1 var and set {"Roger", "Syd"}
		set1 = {"Roger", "Syd"}
	// create set2 var and set {"Roger"}
		set2 = {"Roger"}
	// intersect set1 and set2 and print
		intersect = set1 & set2
		print(intersect) # {'Roger'}
	// union set1 and set2 and print
		union = set1 | set2
		print(union) # {'Syd', 'Roger'}
	// difference set1 and set2 and print	
		difference = set1 - set2
		print(difference) # {'Syd'}
	// isSuperSet set1 and set2 and print	
		isSuperSet = set1 > set2 # is that set has everything of the other set
		print(isSuperSet) # True
	// print set1 as typecast list	
		print(list(set1)) # ['Syd', 'Roger']
	//
		numbers = [1, 1, 2, 3, 4]
		uniques = set(numbers)
		print(uniques)
		#
			{1, 2, 3, 4}
	//
		second = {1, 4}
		second.add(5)
		second.remove(5)
		len(second)
	//
		numbers = [1, 1, 2, 3, 4]
		first = set(numbers)
		second = {1, 5}
		# get union of 2 sets
		print(first | second)
		#
			{1, 2, 3, 4, 5}
		# returns a new set that includes all the items that are in both 1st and 2nd sets
		prin
		print(first & second)
		#
			{1}
		# get difference
		print(first - second)
		#
			{2, 3, 4}
		# sematic difference
		print(first ^ second)
		#
			{2, 3, 4, 5}
	//
		if 1 in first:
			print("yes")		



> routine n - while loops - nnn
	/*
		Notes:
	*/
	// print i variable from 1 to 4 using while loop
		i = 1
		while i < 5:
			print(i)
			i += 1
	//
		number = 100
		while number > 0:
			print(number)
			number = number // 2
		//
			100
			50
			25
			12
			6
			3
			1


> routine n - prog n
	/*
		Notes:
			- use while loop. From 1 to 5
			- print * for each line representing the counter of the loop
			- print done when done
	*/
	i = 1
	while i <= 5:
		print(i)
		print('*' * i)
		i+=1
	print("Done")	



> routine n - prog n
	/*
		Notes:
			- user will guess a secret number
			- guess limit is 3 only
			- print You Won if he guess correctly
			- else Sorry, you failed
			- use while loop
			- use break if success
			- use else in while
	*/
	secret_number = 9
	guess_count = 0
	guess_limit = 3
	while guess_count < guess_limit:
		guess = int(input("Guess: "))
		guess_count += 1
		if guess == secret_number:
			print("You won")
			break
	else:
		print("Sorry, you failed")	



> routine n - prog n
	/*
		Notes:
			- programs ask specific command from user
			- help prints
				start - to start the car
				stop - to stop the car
				quit - to exit program
			- start
				- car started... ready to go
					or
				- ... but the car has already started
			- stop
				...
			- quit
				exit program
			- else
				sorry, i dont understand that
	*/
	command = ''
	car_status = ''
	while True:
		command = input("> ").upper()
		if command == 'HELP':
			print("start - to start the car")
			print("stop - to stop the car")
			print("quit = to exit")
		elif command == 'START':
			if car_status == command:
				print("... but car has already started")
			else:
				print("car started... Ready to go.")
				car_status = command
		elif command == "STOP":
			if car_status == command:
				print("... but car has already stopped")
			else:
				print("car stop...")
				car_status = command
		elif command == 'QUIT':
			break
		else:
			print("Sorry, I don't understand that.")



> routine n - infinite loop
	/*
		Notes:
	*/
	white True:
		command = input(">")
		print("Echo", command)
		if command.lower() == "quit":
			break



> routine n - for loops - nnn
	/*
		Notes:
	*/
	// print Python characters vertically
		for item in 'Python':
		    print(item)
	// print each item in a list
		for item in ['Cheng', 'Jan']:
		    print(item)
	// print 0 to 4 using range
		for item in range(5):
		    print(item)
	// create an item list. Loop it and print each index and item using enumerate()
		items = [1, 2, 3, 4]
		for index, item in enumerate(items):
			print(index, item)	
	// create a list prices variable. Total the price. Print the total after for loop
		prices = [10, 20, 30]
		total = 0
		for price in prices:
			total += price
		print(total)
	// print from (0, 0) to (3, 2)
		for x in range(4):
			for y in range(3):
				print(f'({x}, {y})')
	// use numbers = [5, 2, 5, 2, 2] to print capital F
		numbers = [5, 2, 5, 2, 2]
		for x in numbers:
			print('x' * x)
	// use numbers = [5, 2, 5, 2, 2] to print capital F using nested loop
		numbers = [5, 2, 5, 2, 2]
		for x in numbers:
			output = ''
			for count in range(x):
				output += 'x'
			print(output)
	//
		for number in range(3):
			print("Attempt", number) 
				// repeats 3 times. 0 1 2
				// Attempt 0
				// Attempt 1
				// Attempt 2

	//
		for number in range(3):
			print(number + 1) // 1 2 3

	//
		for number in range(3):
			print("Attempt", number + 1, (number + 1) * ".")
			// Attempt 1 .
			// Attempt 2 ..
			// Attempt 3 ...

	//
		for number in range(1, 4):
			print("Attempt", number, number * ".")
			// Attempt 1 .
			// Attempt 2 ..
			// Attempt 3 ...

	//
		for number in range(1, 10, 2): # skip count
			print("Attempt", number, number * ".")
			// Attempt 1 .
			// Attempt 3 ...
			...
			// Attempt 9 .........			



> routine n - prog n
	/*
		Notes:
			- create a list of numbers
			- loop each item
			- print the biggest number
			- use for loop
	*/
	numbers = [1, 2, 3, 5, 4]
	biggest = 0
	for number in numbers:
		if number > biggest:
			biggest = number
	print("The biggest numbers is: " + str(biggest))



> routine n - prog n
	/*
		Notes:
			- create a list of numbers that has duplicate numbers
			- remove the duplicate numbers
			- use for loop
	*/	
	numbers = [5, 1, 5, 5, 6]
	unique = []
	for item in numbers:
		if item not in unique:
			unique.append(item)
	print(unique)



> routine n - For..Else
	/*
		Notes:
	*/
	//
		successful = True
		for number in range(3):
			print("Attempt")
			if successful:
				print("Successful")
				break
		//
			Attempt
			Successful

	//
		successful = False
		for number in range(3):
			print("Attempt")
			if successful:
				print("Successful")
				break
		else:
			print("Attempted 3 times and failed")
		//
			Attempt
			Attempt
			Attempt
			Attempted 3 times and failed
			


> routine n - nested loops
	/*
		Notes:
	*/
	for x in range(5):
		for y in range(3):
			print(f"({x}, {y})")



> routine n - defining functions
	/*
		Notes:
	*/
	//
		def greet():
			print("Hi there")
			print("Welcome")

		greet()
	// create greet function that prints hello. Call it
		def greet()
			print('hello')
		greet()
	// create greet function with name arg and use it in print
		def greet(name)
			print('hello ' + name)
		greet('cheng')
	// create greet function with name arg that has default value. Call it using default value
		def greet(name='bob')
			print('hello ' + name)
		greet()	
	// create a greet def with name arg. It will print hello + name if name has value, otherwise just return. Use in both instance
		def greet(name):
		    if not name:
		        return
		    print('hello ' + name)
		greet(False)
		greet('cheng')
	// create a greet def that returns a seperated values
		def greet(name):
			print('hello ' + name)
			return name, 'cheng', 8
		print(greet('syd'))
	// create greet function with first and last name arg. Call if with keyword argument
		def greet_user(first_name, last_name):
			print(f'Hi {first_name} {last_name}')
			print('Welcome aboard!')
		greet_user(last_name='John', first_name='Smith')	



> routine n - types of functions
	/*
		Notes:
			- check Complete Python Mastery video about this
	*/
	def get_greeting(name):
		return f"Hi {name}"

	message = get_greet("Michael")



> routine n - keyword arguments
	/*
		Notes:
	*/
	def increment(number, by):
		return number + by

	print(increment(2, by=1))



> routine n - default arguments
	/*
		Notes:
			- all required parameters should come first before optional
	*/
	def increment(number, by=1):
		return number + by

	print(increment(2))



> routine n - *args
	/*
		Notes:
	*/
	def multiply(*numbers):
		total = 1
		print(numbers) // returns a tuple. (value1, value2, ...)
		for number in numbers:
			print(number)
			total *= number
		return total

	print(multiply(2, 3, 4, 5))



> routine n - **args
	/*
		Notes:
	*/
	def save_user(**user):
		print(user) // returns a dictionary. {'id': 1, 'name': 'John', 'age': 22}
		print(user["id"])
		print(user["name"])
		print(user["age"])

	save_user(id=1, name="John", age=22)



> routine n - scope
	/*
		Notes:
	*/
	//
		message = "a"

		def greet(name):
			global message // not recommended
			message = "b"

		greet("Mosh")
		print(message) // b



> routine n - nested functions - nnn
	/*
		Notes:
	*/
	# create a nested function that will print each word of a sentence in a new line
		def talk(phrase):
			def say(word):
				print(word)
			words = phrase.split(' ')
			for word in words:
				say(word)
		talk('I am going to buy the milk')



> routine n - nested functions - nonlocal
	/*
		Notes:
			nonlocal - ables us to access the outside count variable
	*/
	# create an increment counter using a nested function and nonlocal var
		def counter():
			count = 0
			def increment():
				nonlocal count
				count = count + 1
				return count
			return increment
		increment = counter()
		print(increment())
		print(increment())
		print(increment())



> routine n - lambda functions - nn
	/*
		Notes:
			- recheck sorting lists topic first before checking this
	*/
	// create a multiplication lambda function, use it	
		multiply = lambda num : num * 2
		print(multiply(2))
	//
		items = [
			("Product1", 10),
			("Product2", 9),
			("Product3", 12),
		]
		items.sort(key=lambda item:item[1])
		print(items)
		//
			[
				("Product2", 9),
				("Product1", 10),
				("Product3", 12),
			]		



> routine n - map() - lambda functions
	/*
		Notes:
	*/
	// print a list that was doubled using map() and lambda
		numbers = [1, 2, 3]
		print(list(map(lambda a: a * 2, numbers)))
	//
		items = [
			("Product1", 10),
			("Product2", 9),
			("Product3", 12),
		]
		prices = []
		for item in items:
			prices.append(item[1])
		print(prices)
		// [10, 9, 12]
	//
		items = [
			("Product1", 10),
			("Product2", 9),
			("Product3", 12),
		]
		x = map(lambda item: item[1], items)
		print(x)
			// <map object>
		for item in x:
			print(item)
			//
				10
				9
				12
	//
		items = [
			("Product1", 10),
			("Product2", 9),
			("Product3", 12),
		]
		prices = list(map(lambda item: item[1], items))
		print(prices)
			// [10, 9, 12]	



> routine n - filter() - lambda functions
	/*
		Notes:
			filter takes an iterable and returns a filter object which is another iterable but without some of the original items
	*/
	// print a filtered list of even numbers using filter() and lambda
		numbers = [1, 2, 3, 4, 5, 6]
		print(list(filter(lambda n : n % 2 == 0, numbers)))
	//
		items = [
			("Product1", 10),
			("Product2", 9),
			("Product3", 12),
		]
		// item[1] >= 10 result of this is boolean, if its true, this item will return
		x = filter(lambda item: item[1] >= 10, items)
		print(x)
		//
			<filter object>
	//
		items = [
			("Product1", 10),
			("Product2", 9),
			("Product3", 12),
		]
		filtered = list(filter(lambda item: item[1] >= 10, items))
		print(filtered)
		//
			[('Product1', 10), ('Product3', 12)]		



> routine n - List Comprehensions
	/*
		Notes:
			- in python, the prefered way to map and filter items is to use list comprehensions
	*/
	//
		items = [
			("Product1", 10),
			("Product2", 9),
			("Product3", 12),
		]

		// prices = list(map(lambda item: item[1], items))
		// same result
		prices [item[1] for item in items]

		//filtered = list(filter(lambda item: item[1] >= 10, items))
		filtered = [item for item in items if item[1] >= 10]
		// return current item for each item in items if value of item[1] is >= 10



> routine n - dictionary comprehension
	/*
		Notes:
	*/
	//
		values = []
		for x in range(5):
			values.append(x * 2)
	// [expression for item in items]
		values = [x * 2 for x in range(5)]
	// use it in sets
		values = {x * 2 for x in range(5)}
		print(values)
		//
			{0, 2, 4, 6, 8}
	// dictionaries
		values = {x: x * 2 for x in range(5)}
		print(values)
		//
			{0: 0, 1: 2, 2: 4, 3: 6, 4: 8}
	// tuple
		values = (x * 2 for x in range(5))
		print(values)
		//
			<generator object>
			check generator expressions topic



> routine n - generator expressions comprehension
	/*
		Notes:
			- generator object 
				- is still iterable
				- doesn't store all items in memory unlike list
					- that means you wont be able to get the total number of items you're working with
					- it spits out a new value every iterate
			- if possible, use generator to save memory space
				- generator is much better if compare to range(999999999)
				- the downside is you cannot check the len() or count or size of a generator unless you use getsizeof from sys
	*/
	//
		values = (x * 2 for x in range(5))
		for x in values:
			print(x)
			//
				0
				2
				...
				18
	//
		from sys import getsizeof
		values = (x * 2 for x in range(1000))
		print("gen: ", getsizeof(values))
		//
			gen: 120
		values = [x * 2 for x in range(1000)]
		print("list: ", getsizeof(values))
		//
			list: 824464			



> routine n - reduce() - lambda functions
	/*
		Notes:
			lambda a, b: a[1] + b[1]
				# 1st arg a is the accumulated value
				# 2nd arg b is the updated value from the iterable
	*/
	# create a tuple list expenses. Print the sum using reduce()
		from functools import reduce
		expenses = [
			('Dinner', 80),
			('Car repair', 120)
		]
		sum = reduce(lambda a, b: a[1] + b[1], expenses)
		print(sum)



> routine n - recursion - nn
	/*
		Notes:
	*/
	# get the factorial of a number using recursion
		def factorial(n):
			if n == 1: return 1
			return n * factorial(n-1)
		print(factorial(3))



> routine n - find the most repeated characters
	/*
		Notes:
	*/
	//
		sentence = "This is a common interview question"
		char_frequency = {}
		for char in sentence:
			if char in char_frequency:
				char_frequency[char] += 1
			else:
				char_frequency[char] = 1
		print(char_frequency)
		//
			{'T': 1, 'h': 1, 'i': 5, ...}
	//
		from pprint import pprint # beautify your printing stuffs

		pprint(char_frequency, width=1)
		//
			{' ': 5,
			 'T': 1, 
			 ...
			}
	// sorting
		sentence = "This is a common interview question"
		char_frequency = {}
		for char in sentence:
			if char in char_frequency:
				char_frequency[char] += 1
			else:
				char_frequency[char] = 1
		char_frequency_sorted = sorted(char_frequency.items(), key=lambda kv:kv[1], reverse=True)
		print(char_frequency_sorted[0])
		//
			('i', 5)



> routine n - Zip Function
	/*
		Notes:
	*/
	//
		list1 = [1, 2, 3]
		list2 = [10, 20, 30]
		print(zip(list1, list2))
		//
			<zip object>
	//
		list1 = [1, 2, 3]
		list2 = [10, 20, 30]
		print(list(zip(list1, list2)))
		//
			[(1, 10), (2, 20), (3, 30)]



> routine n - Stacks
	/*
		Notes:
			- LIFO
				- last in first out
	*/
	//
		browsing_session = []
		browsing_session.append(1)
		browsing_session.append(2)
		browsing_session.append(3)
		print(browsing_session)
		//
			[1, 2, 3]
		browsing_session.pop()
		print(browsing_session)
		//
			[1, 2]
		if not browsing_session: 
			print(browsing_session[-1])
		//
			2



> routine n - Queus
	/*
		Notes:
			- fifo
				- first in first out
	*/
	//
		from collections import deque
		queue = deque([])
		queue.append(1)
		queue.append(2)
		queue.append(3)
		queue.popleft()
		print(queue)
		//
			deque([2, 3])
	//
		if not queue:
			print('empty')



> routine n - decorators - nn
	/*
		Notes:
	*/
	# create a sample of decorator	
		def logtime(func):
			def wrapper():
				# done before
				print("before")
				val = func()
				# done after
				print("after")
				return val
			return wrapper
		@logtime
		def hello():
			print('hello')
		hello()
		# before
		# hello
		# after



> routine n - Docstrings - nn
	/*
		Notes:
	*/
	# create a docstring sample
		def increment(n):
			"""Increment a number"""
			return n + 1
		print(help(increment))



> routine n - Annotations - nn
	/*
		Notes:
	*/
	# create a variable count and annotate it is an int 
		count: int = 0	
	# create a function that specifies it receives an int and also goint to return an int using annotations
		def increment(n: int) -> int :  
			return n + 1



> routine n - exceptions - nnn
	/*
		Notes:
			try:
				# some lines of code
			except <ERROR1>:
				# handler <ERROR1>
			except <ERROR2>:
				# handler <ERROR2>
			except:
			else:
			finally:		
	*/
	// try to get user input, create except for ValueError and ZeroDivisionError
		try:
			age = int(input(‘Age: ‘))
			print(age)
		except ValueError:
			print(‘Not a valid number’)
		except ZeroDivisionError:
			print(‘Age cannot be 0’)
	//
		try:
			age = int(input("Age: "))
		except ValueError:
			print("You didn't enter a valid age.")
		else:
			print("No exceptions were thrown")
		//
			> 10
			No exceptions were thrown
	//
		try:
			age = int(input("Age: "))
		except ValueError as ex:
			print("You didn't enter a valid age.")
			print(ex)
			print(type(ex))
		else:
			print("No exceptions were thrown")
		//
			> a
			You didn't enter a valid age.
			invalid literal for int()
			<class 'ValueError'>	



> routine n - handling different exceptions
	/*
		Notes:
	*/
	//
		try:
			age = int(input("Age: "))
			xfactor = 10 / age
		except ValueError:
			print("You didn't enter a valid age.")
		except ZeroDivisionError:
			print("Age cannot be 0.")
		else:
			print("No exceptions were thrown")
	//
		try:
			age = int(input("Age: "))
			xfactor = 10 / age
		except (ValueError, ZeroDivisionError):
			print("You didn't enter a valid age.")
		else:
			print("No exceptions were thrown")



> routine n - cleaning up
	/*
		Notes:
	*/
	//
		try:
			file = open("app.py")
			age = int(input("Age: "))
			xfactor = 10 / age
		except (ValueError, ZeroDivisionError):
			print("You didn't enter a valid age.")
		else:
			print("No exceptions were thrown")
		finally:
			file.close()



> routine n - With Statement
	/*
		Notes:
			- the With statement is used to automatically release external resources
	*/
	//
		try:
			with open("app.py") as file:
				print("File opened.")
			age = int(input("Age: "))
			xfactor = 10 / age
		except (ValueError, ZeroDivisionError):
			print("You didn't enter a valid age.")
		else:
			print("No exceptions were thrown")



> routine n - raising exceptions
	/*
		Notes:
			- search python 3 builtin exceptions
	*/
	// raise an Exception
		raise Exception('An error!')
	// raise an Exception and try cath it
		try:
			raise Exception('An Error!')
		except Exception as error:
			print(error)	
	// create a DogNotFoundException class and use it as raise Exception
		class DogNotFoundException(Exception): # DogNotFoundException using inheritance
			pass
		try:
			raise DogNotFoundException()
		except DogNotFoundException:
			print('Dog not found!')	
	//
		def calculate_xfactor(age):
			if age <= 0:
				raise ValueError("Age cannot be 0 or less") 
			return 10 / age
		calculate_xfactor(-1)
		//
			ValueError: Age cannot be 0
	//
		def calculate_xfactor(age):
			if age <= 0:
				raise ValueError("Age cannot be 0 or less") 
			return 10 / age
		try:
			calculate_xfactor(-1)
		except ValueError as error:
			print(error)



> routine n - cost of raising exceptions
	/*
		Notes:
			- raising your own exceptions creates cost daw
			- watch video in Mosh complete python mastery
			- raise exceptions lng daw if you really have to
	*/







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







> routine n - Classes
	/*
		Notes:
			- class definitions cannot be empty, put in the pass statement to avoid getting an error.
			- self
				- is a reference to the current instance of the class, and is used to access variables that belongs to the class.
	*/
	// create class
		class Person:
		    pass



> routine n - magic methods
	/*
		Notes:
			- https://rszalski.github.io/magicmethods/
				- __init__(self, [...)
					- The initializer for the class.
					- constructor
				- __str__(self)
					- Defines behavior for when str() is called on an instance of your class
				- __getitem__(self, key)
					- Defines behavior for when an item is accessed, using the notation self[key]
					- use in getters and setters
				- __setitem__(self, key, value)
					- Defines behavior for when an item is assigned to, using the notation self[nkey] = value
					- use in getters and setters
				- __gt__(self, other)
					- Defines behavior for the greater-than operator
					- used in operator overloading
				- __eq__(self, other)
					- Defines behavior for the equality operator
				- __add__(self, other)
					- Implements addition
				- __len__(self)
					- Returns the length of the container
				- __iter__(self)
					- Should return an iterator for the container
			- self
				- is a reference to the current instance of the class, and is used to access variables that belongs to the class.
	*/



> routine n - classes - constructor + simple method
	/*
		Notes:
			- self
					- is a reference to the current instance of the class, and is used to access variables that belongs to the class.
	*/
	// create a class Person with a contructor that accepts a name. Also create a greet def and use it
	// assign an age propery using the object
		class Person:
			def __init__(self, name):
				self.name = name
			def greet(self):
				print("Hi, I'm " + self.name)
		person1 = Person('Cheng')
		person1.age = 10
		person1.greet()
	//
		class Point:
			def __init__(self, x, y):
				self.x = x
				self.y = y
			def draw(self):
				print(f"Point ({self.x}, {self.y})")
		point = Point(1, 2)
		print(point.x)
		//
			1
		point.draw()
		//
			Point(1, 2)



> routine n - class attributes vs instance attributes
	/*
		Notes:
			- class level attribute value is available to all instance
	*/
	//
		class Point:
			default_color = "red" 		# class level attribute
			def __init__(self, x, y):
				self.x = x 				# x and y are instance attributes
				self.y = y
			def draw(self):
				print(f"Point ({self.x}, {self.y})")
		point = Point(1, 2)
		print(point.default_color)
		//
			red
		print(Point.default_color)
		//
			red
		point.draw()
		//
			Point(1, 2)
		point.z = 10
		another = Point(3, 4)
		another.draw()
		//
			Point(3, 4)
		Point.default_color = "yellow"
		print(Point.default_color)
		//
			yellow
		print(another.default_color)
		//
			yellow



> routine n - class methods vs instance methods
	/*
		Notes:
	*/
	//
		class Point:
			def __init__(self, x, y): 		# this is instance method
				self.x = x
				self.y = y
			@classmethod 		#decorator
			def zero(cls): 					# this is class method
				return cls(0, 0)
			def draw(self): 				# this is instance method
				print(f"Point ({self.x}, {self.y})")

		point = Point.zero()
		point.draw()
		//
			Point (0, 0)



> routine n - magic methods - __str__
	/*
		Notes:
	*/
	//
		class Point:
			def __init__(self, x, y): 	# magic method / constructor
				self.x = x
				self.y = y
			def __str__(self): 			# magic method
				return f"({self.x}, {self.y})"
			def draw(self):
				print(f"Point ({self.x}, {self.y})")
		point = Point(1, 2)
		print(point)
		//
			(1, 2)



> routine n - comparing objects - __eq__, __gt__
	/*
		Notes:
	*/
	//
		class Point:
			def __init__(self, x, y):
				self.x = x
				self.y = y
		point = Point(1, 2)
		other = Point(1, 2)
		print(point == other)
		//
			False
	//
		class Point:
			def __init__(self, x, y):
				self.x = x
				self.y = y
			def __eq__(self, other):
				return self.x == other.x and self.y == other.y
		point = Point(1, 2)
		other = Point(1, 2)
		print(point == other)
		//
			True
	//
		class Point:
			def __init__(self, x, y):
				self.x = x
				self.y = y
			def __eq__(self, other):
				return self.x == other.x and self.y == other.y
			def __gt__(self, other):
				return self.x > other.x and self.y > other.y
		point = Point(10, 20)
		other = Point(1, 2)
		print(point > other)
		//
			True
		print(point < other)
		//
			False



> routine n - performing arithmetic operations - __add__
	/*
		Notes:
	*/
	//
		class Point:
			def __init__(self, x, y):
				self.x = x
				self.y = y
			def __add__(self, other):
				return Point(self.x + other.x, self.y + other.y)
		point = Point(10, 20)
		other = Point(1, 2)
		combined = point + other
		print(combined.x)
		#
			11 
		print(combined.y)
		#
			22



> routine n - making custom containers - __getitem__, __setitem__
	/*
		Notes:
	*/
	//
		class TagCloud:
			def __init__(self):
				self.tags = {}
			def add(self, tag):
				self.tags[tag] = self.tags.get(tag, 0) + 1
		cloud = TagCloud()
		cloud.add("python")
		cloud.add("python")
		cloud.add("python")
		print(cloud.tags)
		//
			{'python': 3}
	//
		class TagCloud:
			def __init__(self):
				self.tags = {}
			def add(self, tag):
				self.tags[tag] = self.tags.get(tag, 0) + 1
		cloud = TagCloud()
		cloud.add("Python")
		cloud.add("python")
		cloud.add("python")
		print(cloud.tags)
		//
			{'Python': 1,
			'python': 2}
	//
		class TagCloud:
			def __init__(self):
				self.tags = {}
			def add(self, tag):
				self.tags[tag.lower()] = self.tags.get(tag.lower(), 0) + 1
		cloud = TagCloud()
		cloud.add("Python")
		cloud.add("python")
		cloud.add("python")
		print(cloud.tags)
		//
			{python': 3}
	//
		class TagCloud:
			def __init__(self):
				self.tags = {}
			def add(self, tag):
				self.tags[tag.lower()] = self.tags.get(tag.lower(), 0) + 1
			def __getitem__(self, tag):
				return self.tags.get(tag.lower(), 0)
			def __setitem__(self, tag, count):
				self.tags[tag.lower()] = count
			def __len__(self):
				return len(self.tags)
			def __iter__(self): # get iterator object magic method
				return iter(self.tags)

		cloud = TagCloud()
		print(cloud["python"])
		//
			0
		cloud["python"] = 10
		print(cloud["python"])
		// 
			10
		print(len(cloud))
		//
			1



> routine n - private members
	/*
		Notes:
			-
				self.tags 		# public
				self.__tags 	# private
	*/
	//
		class TagCloud:
			def __init__(self):
				self.__tags = {}
			def add(self, tag):
				self.__tags[tag.lower()] = self.__tags.get(tag.lower(), 0) + 1
			def __getitem__(self, tag):
				return self.__tags.get(tag.lower(), 0)
			def __setitem__(self, tag, count):
				self.__tags[tag.lower()] = count
			def __len__(self):
				return len(self.__tags)
			def __iter__(self): # get iterator object magic method
				return iter(self.__tags)
		cloud = TagCloud()
		print(cloud.tags)
		//
			AttributeError: no attribute
		print(cloud.__tags)
		//
			AttributeError: no attribute
	//
		class TagCloud:
			def __init__(self):
				self.__tags = {}
			def add(self, tag):
				self.__tags[tag.lower()] = self.__tags.get(tag.lower(), 0) + 1
			def __getitem__(self, tag):
				return self.__tags.get(tag.lower(), 0)
			def __setitem__(self, tag, count):
				self.__tags[tag.lower()] = count
			def __len__(self):
				return len(self.__tags)
			def __iter__(self): 	# get iterator object magic method
				return iter(self.__tags)
		cloud = TagCloud()
		print(cloud.__dict__)
		//
			{'_TagCloud__tags': {}}
		print(cloud._TagCloud__tags)
		//
			{}



> routine n - properties
	/*
		Notes:
	*/
	//
		class Product:
			def __init__(self, price):
				self.set_price = price
			# this is now private
			def __get_price(self):
				return self.__price
			def set_price(self, value):
				if value < 0:
					raise ValueError("Price cannob be negative.")
				self.__price = value
			# this is how you set property
			price = property(get_price, set_price)
		product = Product(10)
		print(product.price)
		//
			10
		product.price = -1
		//
			ValueError
	//
		class Product:
			def __init__(self, price):
				self.price = price
			# this is now private
			@property
			def price(self):
				return self.__price
			@price.setter
			def price(self, value):
				if value < 0:
					raise ValueError("Price cannob be negative.")
				self.__price = value
		product = Product(10)
		print(product.price)
		//
			10
		product.price = -1
		//
			ValueError
	//
		class Product:
			def __init__(self, price):
				self.price = price
			# this is now private
			@property
			def price(self):
				return self.__price
		product = Product(10)
		print(product.price)
		//
			10
		product.price = 2
		//
			AttributeError: can't set attribute



> routine n - inheritance
	/*
		Notes:
	*/
	//
		class Animal:
			def __init__(self):
				self.age = 1
			def eat(self):
				print("eat")
		# Animal: Parent, Base
		# Mammal: Child, Sub class
		class Mammal(Animal):
			def walk(self):
				print("walk")
		class Fish(Animal):
			def swim(self):
				print("swim")
		m = Mammal()
		m.eat()
		//
			eat
		print(m.age)
		//
			1
	// create a class Dog and Cat that inherits from class Mammal that has a def of walk.
		class Mammal:
		    def walk(self):
		        print("walk")
		class Dog(Mammal):
		    def bark(self):
		        print("bark")
		class Cat(Mammal):
		    pass



> routine n - the object class
	/*
		Notes:
			- Animal class default inherits to object
			- object is that base class of all
	*/
	//
		class Animal:
			def __init__(self):
				self.age = 1
			def eat(self):
				print("eat")
		class Mammal(Animal):
			def walk(self):
				print("walk")
		m = Mamma()
		print(isinstance(m, object))
		//
			True
		o = object()
		print(issubclass(Mammal, Animal))
		//
			True
		print(issubclass(Mammal, object))
		//
			True



> routine n - method overriding
	/*
		Notes:
	*/
	//
		class Animal:
			def __init__(self):
				self.age = 1
			def eat(self):
				print("eat")
		class Mammal(Animal):
			def __init__(self):
				super().__init__() 		# remove super if you want to override the parent method
				self.weight = 2
			def walk(self):
				print("walk")
		m = Mammal()
		print(m.age)
		print(m.weight)



> routine n - multilevel inheritance
	/*
		Notes:
			- watch video, just explanation, no much coding
				- Mosh Complete Python Mastery
	*/
	//
		class Animal:
			def eat(self):
				print("eat")
		class Bird(Animal):
			def fly(self):
				print("fly")
		class Chicken(Bird):
			pass



> routine n - multiple inheritance
	/*
		Notes:
			- watch video. explaining why multiple inheritance is also bad
				- Mosh Complete Python Mastery
			- its bad if you dont use it properly
	*/
	//
		class Employee:
			def greet(self):
				print("Employee Greet")

		class Person:
			def greet(self):
				print("Person Greet")

		class Manager(Employee, Person):
			pass

		manager = Manager()
		manager.greet()
		//
			Employee Greet
	// good example of multiple inheritance
		class Flyer:
			def fly(self):
				pass
		class Swimmer:
			def swim(self):
				pass
		class FlyingFish(Flyer, Swimmer)
			pass



> routine n - polymorphism - nnn
	/*
		Notes:
			# The word polymorphism means having many forms. 
			# In programming, polymorphism means the same function name (but different signatures) being used for different types. 
				# The key difference is the data types and number of arguments used in function.		
	*/
	// show polymorphism using len()
		print(len("geeks")) 		# len() being used for a string
		print(len([10, 20, 30])) 	# len() being used for a list
	// create a simple def and show how to use it in polymorphism
		def add(x, y, z = 0):
			return x + y + z
		print(add(2, 3))
		print(add(2, 3, 4))
	// create class India and USA with capital def that prints their capital. Use for in loop to showcase polymorphism
		class India():
			def capital(self):
				print("New Delhi")
		class USA():
			def capital(self):
				print("Washington")
		obj_ind = India()
		obj_usa = USA()
		for country in (obj_ind, obj_usa):
			country.capital()
			#
				New Delhi
				Washington



> routine n - polymorphism - with Inheritance
	/*
		Notes:
			- in short, polymorphism just totally overrides the parents method
	*/
	// create a class Bird, Sparrow, and Ostrich. Showcase polymorphism and inheritance
		class Bird:
			def intro(self):
				print("There are many types of birds.")
			def flight(self):
				print("Most of the birds can fly but some cannot.")
		class sparrow(Bird):
			def flight(self):
				print("Sparrows can fly.")
		class ostrich(Bird):
			def flight(self):
				print("Ostriches cannot fly.")
		obj_bird = Bird()
		obj_spr = sparrow()
		obj_ost = ostrich()
		obj_bird.intro()
		# 
			There are many types of birds.
		obj_bird.flight()
		# 
			Most of the birds can fly but some cannot.
		obj_spr.intro()
		# 
			There are many types of birds.
		obj_spr.flight()
		# 
			Sparrows can fly.
		obj_ost.intro()
		# 
			There are many types of birds.
		obj_ost.flight()
		# 
			Ostriches cannot fly.



> routine n - polymorphism - with Inheritance and Method Overriding
	/*
		Notes:
			- in short, polymorphism just totally overrides the parents method
	*/
	// create class Animal, Dog, and Cat and showcase polymorphism with Inheritance and Method Overriding
		class Animal:
			def speak(self):
				raise NotImplementedError("Subclass must implement this method")
		class Dog(Animal):
			def speak(self):
				return "Woof!"
		class Cat(Animal):
			def speak(self):
				return "Meow!"
		animals = [Dog(), Cat()]
		for animal in animals:
			print(animal.speak())
			# 
				Woof!
				Meow!



> routine n - operator overloading - nnn
	/*
		Notes:
	*/
	// create a class that compares age of an object using operator overloading
		class Dog:
			def __init__(self, name, age):
				self.name = name
				self.age = age
			def __gt__(self, other):
				return True if self.age > other.age else False
		roger = Dog('Roger', 8)
		syd = Dog('Syd', 8)
		print(roger > syd)



> routine n - extending built-in types
	/*
		Notes:
			- str and list are classes in python
	*/
	//
		class Text(str):
			def duplicate(self):
				return self + self
		class TrackableList(list):
			def append(self, object):
				print("Append called")
				super().append(object)
		text = Text("Python")
		print(text.lower())
		//
			python
		print(text.duplicate())
		//
			PythonPython
		list = TrackableList()
		list.append("1")
		//
			Append called



> routine n - Data Classes
	/*
		Notes:
			- data classes mean you have a class that only has data but no methods
			- you might want to use tuple if you have class that only has data and no method
	*/
	//
		class Point:
			def __init__(self, x, y):
				self.x = x
				self.y = y
			def __eq__(self, other):
				return self.x == other.x and self.y == other.y
		p1 = Piont(1, 2)
		p2 = Piont(1, 2)
		print(p1 == p2)
		//
			True
		print(id([p1])) # print memory id
		print(id([p2])) # print memory id
	//
		from collections import namedtuple
		Point = namedtuple("Point", ["x", "y"])
		p1 = Point(x=1, y=2)
		p2 = Point(x=1, y=2)
		print(p1 == p2)
		//
			True







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







> routine n - modules - nnn
	/*
		Notes:
	*/
	//
		// converters.py
			// create lbs_to_kg and kg_to_lbs def in this file
				def lbs_to_kg(weight):
					return weight * 0.45
				def kg_to_lbs(weight):
					return weight / 0.45	
		// main.py
			// use import
				import converters
				print(converters.kg_to_lbs(70))		
			// use from and import	
				from converters import kg_to_lbs
				print(kg_to_lbs(70))
	//
		// sales.py
			def calc_tax():
				pass
			def calc_shipping():
				pass
		// app.py
			from sales import calc_shipping, calc_tax
			calc_shipping()
	// import *, not recommended
		// sales.py
			def calc_tax():
				pass
			def calc_shipping():
				pass
		// app.py
			from sales import *
			calc_shipping()
	//
		// sales.py
			def calc_tax():
				pass
			def calc_shipping():
				pass
		// app.py
			import sales
			sales.calc_shipping()



> routine n - packages - nnn
	/*
		Notes:
			- package is a container for multiple modules
			- in file system terms, a package is a directory or folder
			- so in our project we can add a new directory and in that directory we can add all the related modules
			- click project folder > create new directory > ecommerce
				- in order to convert ecommerce directory into a package, add a special file in it > __init__.py
	*/
	//
		// use import
			import ecommerce.converters
			ecommerce.converters.kg_to_lbs(70)
		// use from and import	
			from ecommerce.converters import kg_to_lbs
			kg_to_lbs(70)
	//
		// ecommerce/__init__.py
			# python will treat this folder as a package if you have this file
		// ecommerce/sales.py
			def calc_tax():
				pass
			def calc_shipping():
				pass
		// app.py
			import ecommerce.sales
			ecommerce.sales.calc_tax()
			# or
			from ecommerce.sales import calc_tax, calc_shipping
			calc_tax()
			# or 
			from ecommere import sales
			sales.calc_tax



> routine n - sub packages
	/*
		Notes:
	*/
	//
		// ecommerce/shopping/sales.py
			def calc_tax():
				pass
			def calc_shipping():
				pass
		// ecommerce/shopping/__init__.py
		// ecommerece/__init__.py
			# python will treat this folder as a package if you have this file
		// app.py
			from ecommerce.shopping impor sales







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







> routine n - python standard library - random
	/*
		Notes:
	*/
	# import random
		import random
	# returns a float between 0 to 1
		random.random() 
	# returns an int between 1 to 6
		random.randint(1, 6) 
	# randomly picks an item in a list
		members = [‘John’, ‘Bob’, ‘Mary’]
		leader = random.choice(members)
	# print (random int 1 to 6, random int 1 to 6)
		print(f'({random.randint(1, 6)}, {random.randint(1, 6)})')



> routine n - prog n
	/*
		Notes:
			- create a class Dice
				- create a def roll
				- return a tuple eg (random int 1 to 6, random int 1 to 6)
			- use the class
	*/
	import random
	class Dice:
		def roll(self):
			first = random.randint(1, 6)
			second = random.randint(1, 6)
			# return (first, second)  	# this is a tuple
			return first, second       	# this is also a tuple
	dice1 = Dice()
	print(dice1.roll())



> routine n - prog n
	/*
		Notes:
			- create a game of Rock, Paper, Scrissors
				- 1 def to get player choice
				- 1 def to check win
			- use python random.choice()
	*/
	import random
	def get_choices():
		player_choice = str(input("Enter a choice rock, paper, scissors: ")).upper()
		options = ['rock', 'paper', 'scissors']
		computer_choice = str(random.choice(options)).upper()
		final_choices = {"player": player_choice, "computer": computer_choice}
		return final_choices
	def check_win(player, computer):
		print(f"You chose: {player}, computer chose: {computer}")
		if player == computer:
			return "It's a tie"
		elif player == "rock".upper():
			if computer == "scissors".upper():
				return "Rock smashes scissors! You Win!"
			else:
				return "Paper covers rock! You Lose."
		elif player == "paper".upper():
			if computer == "scissors".upper():
				return "Scissors cuts paper! You Lose."
			else:
				return "Paper covers rock! You Win!"
		elif player == "scissors".upper():
			if computer == "paper".upper():
				return "Scissors cuts paper! You Win."
			else:
				return "Rock smashes scissors! You Lose!"
	choices = get_choices()
	print(check_win(choices["player"], choices["computer"]))






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







> routine n - working with paths
	/*
		Notes:
			- better watch the video
				- mosh Complete Python Mastery
	*/
	// various ways to create path object
		from pathlib import Path
		print(Path("C:\\Program Files\\Microsoft"))
		#
			C:\Program Files\Microsoft
		Path(r"C:\Program Files\Microsoft")
		#
			C:\Program Files\Microsoft
		Path("/usr/local/bin")
		#
			\usr\local\bin
		Path() 
		# 
			.
			current folder
		Path("ecommerce/__init__.py")
		#
			ecommerce\__init__.py
		Path() / Path("ecommerce")
		#
			ecommerce
		Path() / "ecommerce" / "__init__.py"
		#
			ecommerce\__init__.py
		Path.home()
		#
			C:\Users\Kael
	//
		path = Path("ecommerce/__init__.py")
		print(path.exists())
		#
			False
			im running this in a new empty folder
		print(path.is_file())
		#
			False
		print(path.is_dir())
		#
			False
		print(path.name)
		#
			__init__.py
		print(path.stem)
		#
			__init__
		print(path.suffix)
		#/
			.py
		print(path.parent)
		#
			ecommerce
		path = Path("ecommerce/__init__.py")
		path = path.with_name("file.txt")
		print(path)
		#
			ecommerce/file.txt
		path = Path("ecommerce/__init__.py")
		path = path.with_name("file.txt")
		print(path.absolute())
		#
			C:/.../file.txt



> routine n - working with directories - nnn
	/*
		Notes:
			* all files and directories
			*.* get all file in the current directory BUT not the directories
			*.py search all the py files		
			glob(), with this method, we can search for files and directories in the current path. 1st arg defines search pattern
	*/
	//
		// import path
			from pathlib import Path
		// print current directory
			print(Path())
		// check if emails directory exist in current directory
			path = Path("emails")
			print(path.exists())
		// create email directory if it does not exist, otherwise create
			path = Path("emails")
			if path.exists():
				path.rmdir()
			else:
				path.mkdir()
		// print all files with .py extension in current directory
			for file in path.glob('*.py'):
				print(file)
	//
		from pathlib import Path
		path = Path("ecommerce")
		path.exists()
		#
			False
		path.mkdir()
		path.rmdir()
		path.rename("ecommerce2")
	//
		from pathlib import Path
		path = Path("ecommerce")
		print(path.iterdir())
		#
			<generator Object>
		for p in path.iterdir():
			print(p)
			#
				ecommerce/__init__.py
				ecommerce/__pycache__
				ecommerce/customer
				ecommerce/shopping
	//
		from pathlib import Path
		path = Path("ecommerce")
		print(path.iterdir())
		#
			<generator Object>
		paths = [p for p in path.iterdir()]
		print(paths)
		#
			[PosixPath or a list of windows path]
	//
		from pathlib import Path
		path = Path("ecommerce")
		print(path.iterdir())
		#
			<generator Object>
		paths = [p for p in path.iterdir() if p.is_dir()]
		print(paths)
		#
			[PosixPath or a list of windows path]
	//
		from pathlib import Path
		path = Path("ecommerce")
		print(path.iterdir())
		#
			<generator Object>
		paths = [p for p in path.iterdir() if p.is_dir()]
		py_files = [p for p in path.glob("*.py")]
		print(py_files)
		#
			[PosixPath or a list of windows path]






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






> routine n - File Handling - nnn
	/*
		Notes:
			- The key function for working with files in Python is the open() function.
			- The open() function takes two parameters; filename, and mode.
			- 4 different methods (modes) for opening a file
				- "r" - Read - Default value. Opens a file for reading, error if the file does not exist
				- "a" - Append - Opens a file for appending, creates the file if it does not exist
				- "w" - Write - Opens a file for writing, creates the file if it does not exist
				- "x" - Create - Creates the specified file, returns an error if the file exists
				-
				- "t" - Text - Default value. Text mode
				- "b" - Binary - Binary mode (e.g. images)
	*/
	//
		f = open("demofile.txt")
		# same with
		f = open("demofile.txt", "rt")
		# Because "r" for read, and "t" for text are the default values, you do not need to specify them.
		# Note: Make sure the file exists, or else you will get an error.
		#	use try catch with "with" to auto close()



> routine n - Open a File on the Server - nnn
	/*
		Notes:
	*/
	//
		// demofile.txt
			Hello! Welcome to demofile.txt
			This file is for testing purposes.
			Good Luck!
		//
			f = open("demofile.txt", "r")
			print(f.read())
			#
				Hello! Welcome to demofile.txt
				This file is for testing purposes.
				Good Luck!			
		// Open a file on a different location
			f = open("D:\\myfiles\welcome.txt", "r")
			print(f.read())



> routine n - Read Only Parts of the File - nnn
	/*
		Notes:
			- By default the read() method returns the whole text, but you can also specify how many characters you want to return
	*/
	//
		f = open("demofile.txt", "r")
		print(f.read(5))
		#
			Hello



> routine n - readline - nnn
	/*
		Notes:
	*/
	//
		f = open("demofile.txt", "r")
		print(f.readline())	
		#
			Hello! Welcome to demofile.txt
	//
		f = open("demofile.txt", "r")
		print(f.readline())
		print(f.readline())
		#
			Hello! Welcome to demofile.txt
			This file is for testing purposes.



> routine n - loop - nnn
	/*
		Notes:
	*/
	//
	f = open("demofile.txt", "r")
	for x in f:
		print(x)	
		#
			Hello! Welcome to demofile.txt
			This file is for testing purposes.
			Good Luck!		



> routine n - close - nnn
	/*
		Notes:
			- watch Mosh Complete Python Mastery on how to use "with" with open to auto close file
				- i was not able to make notes for that due to lack of knowledge
			- notes below from w3school
	*/
	//
		f = open("demofile.txt", "r")
		print(f.readline())
		f.close()	



> routine n - Write - nnn
	/*
		Notes:
			- "a" - Append - will append to the end of the file
			- "w" - Write - will overwrite any existing content		
	*/
	//
		f = open("demofile2.txt", "a")
		f.write("Now the file has more content!")
		f.close()
		#open and read the file after the appending:
		f = open("demofile2.txt", "r")
		print(f.read())	
		#
			Hello! Welcome to demofile2.txt
			This file is for testing purposes.
			Good Luck!Now the file has more content!		
	// overwrite 
		f = open("demofile3.txt", "w")
		f.write("Woops! I have deleted the content!")
		f.close()
		#open and read the file after the overwriting:
		f = open("demofile3.txt", "r")
		print(f.read())
		#
			Woops! I have deleted the content!



> routine n - Create - nnn
	/*
		Notes:
			"x" - Create - will create a file, returns an error if the file exist
			"a" - Append - will create a file if the specified file does not exist
			"w" - Write - will create a file if the specified file does not exist
	*/
	//
		f = open("myfile.txt", "x")
		#
			Result: a new empty file is created!
	// Create a new file if it does not exist
		f = open("myfile.txt", "w")



> routine n - Delete - nnn
	/*
		Notes:
			- To delete a file, you must import the OS module, and run its os.remove() function
	*/
	//
		import os
		os.remove("demofile.txt")
	// avoid error, check if the file exists before you try to delete it
		import os
		if os.path.exists("demofile.txt"):
			os.remove("demofile.txt")
		else:
			print("The file does not exist")		



> routine n - Delete Folder - os.rmdir()
	/*
		Notes:
			- You can only remove empty folders.
	*/
	//
		import os
		os.rmdir("myfolder")	







---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







> routine n - JSON to Python - loads
	/*
		Notes:
	*/
	//
		import json
		# some JSON:
		x =  '{ "name":"John", "age":30, "city":"New York"}'
		# parse x:
		y = json.loads(x)
		# the result is a Python dictionary:
		print(y["age"])	
		#
			30



> routine n - Python to JSON - dumps
	/*
		Notes:
	*/
	//
		import json
		# a Python object (dict):
		x = {
		  "name": "John",
		  "age": 30,
		  "city": "New York"
		}
		# convert into JSON:
		y = json.dumps(x)
		# the result is a JSON string:
		print(y)
		#
			{"name": "John", "age": 30, "city": "New York"}



> routine n - Python to JSON result
	/*
		Notes:
			Python			JSON
			dict			Object
			list			Array
			tuple			Array
			str				String
			int				Number
			float			Number
			True			true
			False			false
			None			null
	*/



> routine n - dumps - nnn
	/*
		Notes:
	*/
	print(json.dumps({"name": "John", "age": 30}))
	#
		{"name": "John", "age": 30}
	print(json.dumps(["apple", "bananas"]))
	#
		["apple", "bananas"]
	print(json.dumps(("apple", "bananas")))
	#
		["apple", "bananas"]
	print(json.dumps("hello"))
	#
		"hello"
	print(json.dumps(42))
	#
		42
	print(json.dumps(31.76))
	#
		31.76
	print(json.dumps(True))
	#
		true
	print(json.dumps(False))
	#
		false
	print(json.dumps(None))	
	#
		null
	x = {
	  "name": "John",
	  "age": 30,
	  "married": True,
	  "divorced": False,
	  "children": ("Ann","Billy"),
	  "pets": None,
	  "cars": [
	    {"model": "BMW 230", "mpg": 27.5},
	    {"model": "Ford Edge", "mpg": 24.1}
	  ]
	}
	print(json.dumps(x))
	#
		{"name": "John", "age": 30, "married": true, "divorced": false, "children": ["Ann", "Billy"], "pets": null, "cars": [{"model": "BMW 230", "mpg": 27.5}, {"model": "Ford Edge", "mpg": 24.1}]}
	import json
	x = {
	  "name": "John",
	  "age": 30,
	  "married": True,
	  "divorced": False,
	  "children": ("Ann","Billy"),
	  "pets": None,
	  "cars": [
	    {"model": "BMW 230", "mpg": 27.5},
	    {"model": "Ford Edge", "mpg": 24.1}
	  ]
	}
	# use four indents to make it easier to read the result:
	print(json.dumps(x, indent=4))
	#
		{
		    "name": "John",
		    "age": 30,
		    "married": true,
		    "divorced": false,
		    "children": [
		        "Ann",
		        "Billy"
		    ],
		    "pets": null,
		    "cars": [
		        {
		            "model": "BMW 230",
		            "mpg": 27.5
		        },
		        {
		            "model": "Ford Edge",
		            "mpg": 24.1
		        }
		    ]
		}
	print(json.dumps(x, indent=4, separators=(". ", " = ")))
	#
		{
		    "name" = "John".
		    "age" = 30.
		    "married" = true.
		    "divorced" = false.
		    "children" = [
		        "Ann".
		        "Billy"
		    ].
		    "pets" = null.
		    "cars" = [
		        {
		            "model" = "BMW 230".
		            "mpg" = 27.5
		        }.
		        {
		            "model" = "Ford Edge".
		            "mpg" = 24.1
		        }
		    ]
		}
	print(json.dumps(x, indent=4, sort_keys=True))
	#
		{
		    "age": 30,
		    "cars": [
		        {
		            "model": "BMW 230",
		            "mpg": 27.5
		        },
		        {
		            "model": "Ford Edge",
		            "mpg": 24.1
		        }
		    ],
		    "children": [
		        "Ann",
		        "Billy"
		    ],
		    "divorced": false,
		    "married": true,
		    "name": "John",
		    "pets": null
		}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







> routine n - Python MySQL - nnn
	/*
		Notes:
	*/



> routine n - Install MySQL Driver - nnn
	/*
		Notes:
			- Python needs a MySQL driver to access the MySQL database.
			- We recommend that you use PIP to install "MySQL Connector".
	*/
	//
		> python -m pip install mysql-connector-python



> routine n - Test MySQL Connector - nnn
	/*
		Notes:
	*/
	// 
		// demo_mysql_test.py
			import mysql.connector
			# if this page is executed with no errors, you have the "mysql.connector" module installed.



> routine n - Create Connection - nnn
	/*
		Notes:
	*/
	//
		// demo_mysql_connection.py:
			import mysql.connector
			mydb = mysql.connector.connect(
				host="localhost",
				user="myusername",
				password="mypassword"
			)
			print(mydb)
			# 
				<mysql.connector.connection.MySQLConnection object ar 0x016645F0>



> routine n - Creating a Database - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="myusername",
			password="mypassword"
		)
		mycursor = mydb.cursor()
		mycursor.execute("CREATE DATABASE mydatabase")
		# If this page is executed with no error, you have successfully created a database.




> routine n - Check if Database Exists - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="myusername",
			password="mypassword"
		)
		mycursor = mydb.cursor()
		mycursor.execute("SHOW DATABASES")
		for x in mycursor:
			print(x)
			# 
				('information_scheme',)
				('mydatabase',)
				('performance_schema',)
				('sys',)			
	// try to access the database when making the connection
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="myusername",
			password="mypassword",
			database="mydatabase"
		)
		#
			If this page is executed with no error, the database "mydatabase" exists in your system
			If the database does not exist, you will get an error.



> routine n - Creating a Table - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="myusername",
			password="mypassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		mycursor.execute("CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))")
		#
			If this page is executed with no error, you have successfully created a table named "customers".



> routine n - Check if Table Exists - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="myusername",
			password="mypassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		mycursor.execute("SHOW TABLES")
		for x in mycursor:
			print(x)
			#
				('customers',)



> routine n - Primary Key - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="yourusername",
			password="yourpassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		mycursor.execute("CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))")
		#If this page is executed with no error, the table "customers" now has a primary key
	// If the table already exists, use the ALTER TABLE keyword
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="yourusername",
			password="yourpassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		mycursor.execute("ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY")	



> routine n - Insert Into Table - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="myusername",
			password="mypassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		sql = "INSERT INTO customers (name, address) VALUES (%s, %s)"
		val = ("John", "Highway 21")
		mycursor.execute(sql, val)
		mydb.commit()
		print(mycursor.rowcount, "record inserted.")
		#
			1 record inserted.



> routine n - Insert Multiple Rows - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="myusername",
			password="mypassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		sql = "INSERT INTO customers (name, address) VALUES (%s, %s)"
		val = [
			('Peter', 'Lowstreet 4'),
			('Amy', 'Apple st 652'),
			('Hannah', 'Mountain 21'),
			('Michael', 'Valley 345'),
			('Sandy', 'Ocean blvd 2'),
			('Betty', 'Green Grass 1'),
			('Richard', 'Sky st 331'),
			('Susan', 'One way 98'),
			('Vicky', 'Yellow Garden 2'),
			('Ben', 'Park Lane 38'),
			('William', 'Central st 954'),
			('Chuck', 'Main Road 989'),
			('Viola', 'Sideway 1633')
		]
		mycursor.executemany(sql, val)
		mydb.commit()
		print(mycursor.rowcount, "record was inserted.")	
		#
			13 record was inserted.



> routine n - Get Inserted ID - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="myusername",
			password="mypassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		sql = "INSERT INTO customers (name, address) VALUES (%s, %s)"
		val = ("Michelle", "Blue Village")
		mycursor.execute(sql, val)
		mydb.commit()
		print("1 record inserted, ID:", mycursor.lastrowid)	
		#
			1 record inserted, ID: 15



> routine n - MySQL Select From - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="myusername",
			password="mypassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		mycursor.execute("SELECT * FROM customers")
		myresult = mycursor.fetchall()
		for x in myresult:
			print(x)
			#
				(1, 'John', 'Highway 21')
				(2, 'Peter', 'Lowstreet 27')
				(3, 'Amy', 'Apple st 652')
				(4, 'Hannah', 'Mountain 21')
				(5, 'Michael', 'Valley 345')
				(6, 'Sandy', 'Ocean blvd 2')
				(7, 'Betty', 'Green Grass 1')
				(8, 'Richard', 'Sky st 331')
				(9, 'Susan', 'One way 98')
				(10, 'Vicky', 'Yellow Garden 2')
				(11, 'Ben', 'Park Lane 38')
				(12, 'William', 'Central st 954')
				(13, 'Chuck', 'Main Road 989')
				(14, 'Viola', 'Sideway 1633')
				(15, 'Michelle', 'Blue Village')		



> routine n - Selecting Columns - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="yourusername",
			password="yourpassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		mycursor.execute("SELECT name, address FROM customers")
		myresult = mycursor.fetchall()
		for x in myresult:
			print(x)



> routine n - Select With a Filter - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="yourusername",
			password="yourpassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		sql = "SELECT * FROM customers WHERE address ='Park Lane 38'"
		mycursor.execute(sql)
		myresult = mycursor.fetchall()
		for x in myresult:
		  	print(x)



> routine n - Wildcard Characters - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="yourusername",
			password="yourpassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		sql = "SELECT * FROM customers WHERE address LIKE '%way%'"
		mycursor.execute(sql)
		myresult = mycursor.fetchall()
		for x in myresult:
			print(x)



> routine n - Prevent SQL Injection - nnn
	/*
		Notes:
	*/
	//
		import mysql.connector
		mydb = mysql.connector.connect(
			host="localhost",
			user="yourusername",
			password="yourpassword",
			database="mydatabase"
		)
		mycursor = mydb.cursor()
		sql = "SELECT * FROM customers WHERE address = %s"
		adr = ("Yellow Garden 2", )
		mycursor.execute(sql, adr)
		myresult = mycursor.fetchall()
		for x in myresult:
			print(x)	



> routine n - Sort the Result - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	sql = "SELECT * FROM customers ORDER BY name"
	mycursor.execute(sql)
	myresult = mycursor.fetchall()
	for x in myresult:
		print(x)	



> routine n - ORDER BY DESC - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	sql = "SELECT * FROM customers ORDER BY name DESC"
	mycursor.execute(sql)
	myresult = mycursor.fetchall()
	for x in myresult:
		print(x)



> routine n - Delete Record - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	sql = "DELETE FROM customers WHERE address = 'Mountain 21'"
	mycursor.execute(sql)
	mydb.commit()
	print(mycursor.rowcount, "record(s) deleted")	



> routine n - Prevent SQL Injection - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	sql = "DELETE FROM customers WHERE address = %s"
	adr = ("Yellow Garden 2", )
	mycursor.execute(sql, adr)
	mydb.commit()
	print(mycursor.rowcount, "record(s) deleted")	



> routine n - Delete a Table - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	sql = "DROP TABLE customers"
	mycursor.execute(sql)



> routine n - Drop Only if Exist - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	sql = "DROP TABLE IF EXISTS customers"
	mycursor.execute(sql)



> routine n - Update Table - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	sql = "UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'"
	mycursor.execute(sql)
	mydb.commit()
	print(mycursor.rowcount, "record(s) affected")	



> routine n - Prevent SQL Injection - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	sql = "UPDATE customers SET address = %s WHERE address = %s"
	val = ("Valley 345", "Canyon 123")
	mycursor.execute(sql, val)
	mydb.commit()
	print(mycursor.rowcount, "record(s) affected")	



> routine n - Limit the Result - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	mycursor.execute("SELECT * FROM customers LIMIT 5")
	myresult = mycursor.fetchall()
	for x in myresult:
		print(x)	



> routine n - Start From Another Position - nnn
	/*
		Notes:
	*/
	import mysql.connector
	mydb = mysql.connector.connect(
		host="localhost",
		user="yourusername",
		password="yourpassword",
		database="mydatabase"
	)
	mycursor = mydb.cursor()
	mycursor.execute("SELECT * FROM customers LIMIT 5 OFFSET 2")
	myresult = mycursor.fetchall()
	for x in myresult:
		print(x)



> routine n - Join Two or More Tables - nnn
	/*
		Notes:
	*/
	//
		// users
			{ id: 1, name: 'John', fav: 154},
			{ id: 2, name: 'Peter', fav: 154},
			{ id: 3, name: 'Amy', fav: 155},
			{ id: 4, name: 'Hannah', fav:},
			{ id: 5, name: 'Michael', fav:}		
		// products
			{ id: 154, name: 'Chocolate Heaven' },
			{ id: 155, name: 'Tasty Lemons' },
			{ id: 156, name: 'Vanilla Dreams' }		
		//
			import mysql.connector
			mydb = mysql.connector.connect(
				host="localhost",
				user="yourusername",
				password="yourpassword",
				database="mydatabase"
			)
			mycursor = mydb.cursor()
			sql = "SELECT \
				users.name AS user, \
				products.name AS favorite \
				FROM users \
				INNER JOIN products ON users.fav = products.id"
			mycursor.execute(sql)
			myresult = mycursor.fetchall()
			for x in myresult:
				print(x)



> routine n - LEFT JOIN - nnn
	/*
		Notes:
	*/
	sql = "SELECT \
	users.name AS user, \
	products.name AS favorite \
	FROM users \
	LEFT JOIN products ON users.fav = products.id"



> routine n - RIGHT JOIN - nnn
	/*
		Notes:
	*/
	sql = "SELECT \
	users.name AS user, \
	products.name AS favorite \
	FROM users \
	RIGHT JOIN products ON users.fav = products.id"






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







> routine n - Python MongoDB - nnn
	/*
		Notes:
			- To be able to experiment with the code examples in this tutorial, you will need access to a MongoDB database.
			- You can download a free MongoDB database at https://www.mongodb.com.
			- Or get started right away with a MongoDB cloud service at https://www.mongodb.com/cloud/atlas.
			- Python needs a MongoDB driver to access the MongoDB database.
			- In this tutorial we will use the MongoDB driver "PyMongo"		
	*/
	//
		> python -m pip install pymongo



> routine n - Test PyMongo - nnn
	/*
		Notes:
	*/
	//
		// demo_mongodb_test.py
		import pymongo



> routine n - nnn - nnn
	/*
		Notes:
			- check w3school and update this note if needed
	*/




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------










> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



