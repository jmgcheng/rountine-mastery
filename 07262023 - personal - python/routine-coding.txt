Date: Jul 26 2023

> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - comments - nnn
	/*
		Notes:
	*/
	# this is a comment



> routine n - output - nnn
	/*
		Notes:
	*/
	print('hello world')



> routine n - variables - nnn
	/*
		Notes:
	*/
	# create price variable and assign 10
		price = 10
	# create rating variable and assign 4.9
		rating = 4.9
	# create course_name variable and assign Python for Beginners
		course_name = 'Python for Beginners'
	# create is_published variable and assign True
		is_published = True	



> routine n - variables - type(x), isinstance(x, type)
	/*
		Notes:
	*/
	# create price variable and assign 10 and check its type
		price = 10
		print(type(price))
	# create name variable and assign cheng and check if its str
		name = 'cheng'
		print(isinstance(name, str))



> routine n - input() - nnn
	/*
		Notes:
	*/
	# ask user to input a name and assigned it to name variable
		name = input("Enter a name: ")



> routine n - type casting
	/*
		Notes:
			int()
			str()
			float()
			bool()
			list()
			tuple()
			range()
			dict()
			set()
			complex()
	*/
	# ask user to input a age and assigned it to age variable. type cast it to int
		age = int(input("Enter age: "))



> routine n - is and in operators - nn
	/*
		Notes:
			is - identify operator, used to compare 2 objects and returns true if both are the same object
			in - membership operator, used to tell if the value is contained in a list or another sequence
	*/



> routine n - strings - notations, format
	/*
		Notes:
			isalpha() - check if a string contains only characters and is not empty
			isalnum() - check if a string contains characters or digits and is not empty
			isdecimal() - check if a string contains digits and is not empty
			lower() - get a lower version of a string
			islower() - check if a string is lowercase
			upper() - get an uppercase version of a string
			isupper() - check if a string is uppercase
			title() - get a capitalized version of a string
			startswith() - check if the string starts with a specific substring
			endswith() - check if the string ends with a specific substring
			replace() - replace a part of a string
			split() - split a string on a specific character seperator
			strip() - trim the whitespace from a sting
			join() - append new letters to a string
			find() - find the position of a substring		
	*/
	# create course variable and assign Python for Beginners
		course = 'Python for Beginners'
	# check if Python is in string course
		print('Python' in course)
	# returns the first character
		print(course[0])
	# returns the second character
		print(course[1])
	# returns the first character from the end
		print(course[-1]) 
	# returns the second character from the end
		print(course[-2])
	# returns Pyt
		print(course[0:3])
	# returns ython for Beginners
		print(course[1:])
	# returns Pytho
		print(course[:5])
	# returns ython for Beginner
		print(course[1:-1])
	# print and concat hi, hello
		print("hi " + "hello")
	# print Hi, my name is Cheng where Cheng is a variable
		name = 'Cheng'
		print(f'Hi, my name is {name}')
	# print course in upper() format
		print(course.upper())
	# print course in lower() format
		print(course.lower())
	# print course in title() format
		print(course.title())
	# returns the index of the first occurrence of p (or -1 if not found) 
		print(course.find('p'))
	# replace for with 4
		print(course.replace('for', '4'))



> routine n - arithmetic operations - nnn
	/*
		Notes:
	*/
		+
		-
		*
	# returns a float
		/ 
	# returns an int
		// 
	# returns the remainder of division
		% 
	# exponentiation - x ** y = x to the power of y
		** 



> routine n - augmented assignment operator - nnn
	/*
		Notes:
	*/
	# augment a variable
		x += 10



> routine n - negative number - nnn
	/*
		Notes:
	*/
	# print a negative number
		print(-1)



> routine n - Operator precedence - nnn
	/*
		Notes:
	*/
	1. parenthesis
	2. exponentiation
	3. multiplication / division
	4. addition / subtraction 



> routine n - if statements - nnn
	/*
		Notes:
	*/
	# if is_hot print hot day, else if is_cold print cold day, else print beautiful day
	if is_hot:
		print(“hot day”)
	elif is_cold:
		print(“cold day”)
	else:
		print(“beautiful day”) 	



> routine n - prog n
	/*
		Notes:
			- programs asks the user for the house price and if the buyer has good credit
			- 10% downpayment for good credit
			- 20% downpayment for bad credit
			- print how much the buyer should down
	*/
	house_price = float(input("Enter house price: "))
	is_good_credit = input("Does buyer have good credit (y/n): ").upper()
	if is_good_credit == 'Y':
	    print("Down payment: " + str(house_price * .10))
	elif is_good_credit == 'N':
	    print("Down payment: " + str(house_price * .20))
	else:
	    print("Credit not recognized")



> routine n - if statements - logical operators
	/*
		Notes:
			# and: both
			# or: at least one
			# not: inverse any boolean value		
	*/
	# create condition1 to True, condition2 to False	
		condition1 = True
		condition2 = False
		print(not condition1) # False
		print(condition1 and condition2) # False
		print(condition1 or condition2) # True

		print(0 or 1) # 1
		print(False or 'hey') # hey
		print('hi' or 'hey') # hi
		print([] or False) # False
		print(False or []) # []

		print(0 and 1) # 0
		print(1 and 0) # 0
		print(False and 'hey') # False
		print('hi' and 'hey') # hey
		print([] and False) # []
		print(False and []) # False



> routine n - global any function - nn
	/*
		Notes:
			- very useful when working with booleans
			- it returns true if any of the values of iterable, if any of them are true its gonna return true
	*/
	# create book_1_read var to True, book_2_read to False
		book_1_read = True
		book_2_read = False
	# use any global function
		print(any([book_1_read, book_2_read])) # True



> routine n - global all function - nn
	/*
		Notes:
			- 
	*/
	# create ingredients_purchased var to True, meal_cooked to False
		ingredients_purchased = True
		meal_cooked = False
	# use all global function
		print(all([ingredients_purchased, meal_cooked])) # False



> routine n - prog n
	/*
		Notes:
			- ask user if he has high income and good credit
			- print eligible for loan if he has both
	*/
	has_high_income = input("Applicant has high income (y/n): ").upper()
	has_good_credit = input("Applicant has good credit (y/n): ").upper()
	if has_high_income == 'Y' and has_good_credit == 'Y':
	    print("Eligible for loan")
	else:
	    print("Not Eligible for loan")



> routine n - prog n
	/*
		Notes:
			- create a program that ask the user's weight in kilo or lbs
			- convert his weight to the other unit
				- lbs = kg / .45
				- kg = lbs * .45
	*/
	weight = float(input("Enter your weight: "))
	unit = input("(k)g or (l)bs: ")
	if unit == "k":
		print("Your weight in lbs is: " + str(weight / .45))
	elif unit == "l":
		print("Your weight in kg is: " + str(weight * .45))
	else:
		print("Error")



> routine n - comparison operators - nnn
	/*
		Notes:
			a > b
			a >= b (greater than or equal to)
			a < b
			a <= b
			a == b (equals)
			a != b (not equals)
	*/



> routine n - ternary operator - nnn
	/*
		Notes:
	*/

	def is_adult(age):
		if age > 18:
			return True
		else:
			return False
	# turn above into a ternary operator
		def is_adult2(age):
			return True if age > 18 else False


> routine n - prog n
	/*
		Notes:
			- ask for the temperature
			- print It's a hot day if greater than 30, else It's not a hot day
	*/
	if temperature > 30:
		print("It's a hot day")
	else:
		print("It's not a hot day ")



> routine n - len() - nnn
	/*
		Notes:
	*/
	# ask for users name then check its character length
		name = input("Name: ")
		length = len(name)



> routine n - prog n
	/*
		Notes:
			- ask for users name then check its character length
			- print his name should not be less than 3 characters
			- print his name should not be more than 50 characters
			- else print looks good
	*/
	if length < 3:
		print(f'Name {name} should not be LESS than 3 characters')
	elif length > 50:
		print(f'Name {name} should not be MORE than 50 characters')
	else:
		print("name looks good!")



> routine n - range() - nnn
	/*
		Notes:
			range(5) 			# generates 0, 1, 2, 3, 4
			range(1, 5) 		# generates 1, 2, 3, 4
			range(1, 5, 2)		# generates 1, 3
			print(range(0, 5))
				> range(0, 5)
			print(list(range(0, 5)))
				> [0, 1, 2, 3, 4]
			print(range(5))
				> range(0, 5)
			print(list(range(5)))
				> [0, 1, 2, 3, 4]
			print(range(1, 5))
				> range(1, 5)
			print(list(range(1, 5)))
				> [1, 2, 3, 4]
			print(range(1, 5, 2))
				> range(1, 5, 2)
			print(list(range(1, 5, 2)))
				> [1, 3]
	*/



> routine n - lists - nnn
	/*
		Notes:
	*/
	# create a list of names
		names = ['jon', 'bob', 'cheng']
	# create a numbers variable and assign it a list from 1 to 5
		numbers = [1, 2, 3, 4, 5]
	# returns the first item
		numbers[0]
	# returns the second item
		numbers[1]
	# returns the first item from the end
		numbers[-1]
	# returns the second item from the end
		numbers[-2]
	# adds 6 to the end
		numbers.append(6) 
	# adds 6 at index position of 0	
		numbers.insert(0, 6) 
	# removes 6	
		numbers.remove(6) 
	# removes the last item	
		numbers.pop() 
	# removes all the items	
		numbers.clear() 
	# returns the index of first occurrence of 8	
		numbers.index(8) 
	# sorts the list	
		numbers.sort() 
	# reverses the list	
		numbers.reverse() 
	# returns a copy of the list 	
		numbers.copy() 



> routine n - while loops - nnn
	/*
		Notes:
	*/
	# print i variable from 1 to 4 using while loop
		i = 1
		while i < 5:
			print(i)
			i += 1


> routine n - prog n
	/*
		Notes:
			- use while loop. From 1 to 5
			- print * for each line representing the counter of the loop
			- print done when done
	*/
	i = 1
	while i <= 5:
		print(i)
		print('*' * i)
		i+=1
	print("Done")	



> routine n - prog n
	/*
		Notes:
			- user will guess a secret number
			- guess limit is 3 only
			- print You Won if he guess correctly
			- else Sorry, you failed
			- use while loop
			- use break if success
			- use else in while
	*/
	secret_number = 9
	guess_count = 0
	guess_limit = 3
	while guess_count < guess_limit:
		guess = int(input("Guess: "))
		guess_count += 1
		if guess == secret_number:
			print("You won")
			break
	else:
		print("Sorry, you failed")	



> routine n - prog n
	/*
		Notes:
			- programs ask specific command from user
			- help prints
				start - to start the car
				stop - to stop the car
				quit - to exit program
			- start
				- car started... ready to go
					or
				- ... but the car has already started
			- stop
				...
			- quit
				exit program
			- else
				sorry, i dont understand that
	*/
	command = ''
	car_status = ''
	while True:
		command = input("> ").upper()
		if command == 'HELP':
			print("start - to start the car")
			print("stop - to stop the car")
			print("quit = to exit")
		elif command == 'START':
			if car_status == command:
				print("... but car has already started")
			else:
				print("car started... Ready to go.")
				car_status = command
		elif command == "STOP":
			if car_status == command:
				print("... but car has already stopped")
			else:
				print("car stop...")
				car_status = command
		elif command == 'QUIT':
			break
		else:
			print("Sorry, I don't understand that.")



> routine n - for loops - nnn
	/*
		Notes:
	*/
	# print Python characters vertically
		for item in 'Python':
		    print(item)
	# print each item in a list
		for item in ['Cheng', 'Jan']:
		    print(item)
	# print 0 to 4 using range
		for item in range(5):
		    print(item)
	# create an item list. Loop it and print each index and item using enumerate()
		items = [1, 2, 3, 4]
		for index, item in enumerate(items):
			print(index, item)	
	# create a list prices variable. Total the price. Print the total after for loop
		prices = [10, 20, 30]
		total = 0
		for price in prices:
			total += price
		print(total)
	# print from (0, 0) to (3, 2)
		for x in range(4):
			for y in range(3):
				print(f'({x}, {y})')
	# use numbers = [5, 2, 5, 2, 2] to print capital F
		numbers = [5, 2, 5, 2, 2]
		for x in numbers:
			print('x' * x)
	# use numbers = [5, 2, 5, 2, 2] to print capital F using nested loop
		numbers = [5, 2, 5, 2, 2]
		for x in numbers:
			output = ''
			for count in range(x):
				output += 'x'
			print(output)


> routine n - prog n
	/*
		Notes:
			- create a list of numbers
			- loop each item
			- print the biggest number
			- use for loop
	*/
	numbers = [1, 2, 3, 5, 4]
	biggest = 0
	for number in numbers:
		if number > biggest:
			biggest = number
	print("The biggest numbers is: " + str(biggest))



> routine n - prog n
	/*
		Notes:
			- create a list of numbers that has duplicate numbers
			- remove the duplicate numbers
			- use for loop
	*/	
	numbers = [5, 1, 5, 5, 6]
	unique = []
	for item in numbers:
		if item not in unique:
			unique.append(item)
	print(unique)



> routine n - list - 2 dimensional
	/*
		Notes:
	*/
	# loop a matrix
		matrix = [
			[1, 2, 3],
			[4, 5, 6],
			[7, 8, 9]
		]
		for row in matrix:
			for item in row:
				print(item)


> routine n - tuples - nnn
	/*
		Notes:
			- They are like read-only lists. 
			- We use them to store a list of items.
			- we cannot add or remove items or change the existing items. 
	*/
	# create a coordinates variable and assign a 1, 2, 3, Tuples
		coordinates = (1, 2, 3)
	# unpack the tuple using seperate variables. Destruct
		x, y, z = coordinates



> routine n - dictionaries - nnn
	/*
		Notes:
	*/
	# create a customer variable. Assign it a dictionary with name, age, is_verified as its keys
		customer = {
			“name”: “John Smith”,
			“age”: 30,
			“is_verified”: True
		}
	# print name of the customer
		print(customer[“name”] )
	# print type of the customer with default value using .get()
		print(customer.get(“type”, “silver”) )
	# create dog var. Assign it a dictionary with name as it key
		dog = {"name": "Roger"}
	# reassign dog name property to cheng or different value	
		dog["name"] = 'cheng'
	# print dog name
		print(dog["name"]) # cheng
	# print dog name using get()
		print(dog.get("name")) # cheng
	# print dog color using get() with default value	
		print(dog.get("color", "default color")) # default color
	# print and check if color in dog	
		print("color" in dog) # False
	# assign key favorite food in dog	
		dog["favorite food"] = "Meat"
	# make a copy of dog	
		dogCopy = dog.copy()
	# print keys() of dog	
		print(dog.keys()) # dict_keys(['name', 'favorite food'])
	# print keys() of dog typecast list	
		print(list(dog.keys())) # ['name', 'favorite food']
	# print values() of dog typecase list
		print(list(dog.values())) # ['cheng', 'Meat']
	# print dog len()
		print(len(dog)) # 2
	# print and pop() dog name
		print(dog.pop("name")) # cheng return and delete the item
	# del() dog favorite food
		del dog['favorite food']
	# print dog
		print(dog) # {}
	# print the copy of dog
		print(dogCopy) # {'name': 'cheng', 'favorite food': 'Meat'}



> routine n - prog n
	/*
		Notes:
			- create the dictionary below
				dict = {
					"1": "One",
					"2": "Two",
					"3": "Three",
					"4": "Four"
				}
			- ask user to input a phone number from 1 to 4
			- program should output equivalent word of the number
			- use for loop
	*/	
	dict = {
		"1": "One",
		"2": "Two",
		"3": "Three",
		"4": "Four"
	}
	phone = input("Phone: ")
	output = ''
	for ch in phone:
		output += dict.get(ch, "!") + ' '
	print(output)



> routine n - sets - nnn
	/*
		Notes:
	*/
	# create set1 var and set {"Roger", "Syd"}
		set1 = {"Roger", "Syd"}
	# create set2 var and set {"Roger"}
		set2 = {"Roger"}
	# intersect set1 and set2 and print
		intersect = set1 & set2
		print(intersect) # {'Roger'}
	# union set1 and set2 and print
		union = set1 | set2
		print(union) # {'Syd', 'Roger'}
	# difference set1 and set2 and print	
		difference = set1 - set2
		print(difference) # {'Syd'}
	# isSuperSet set1 and set2 and print	
		isSuperSet = set1 > set2 # is that set has everything of the other set
		print(isSuperSet) # True
	# print set1 as typecast list	
		print(list(set1)) # ['Syd', 'Roger']



> routine n - functions - nnn
	/*
		Notes:
	*/
	# create greet function that prints hello. Call it
		def greet()
			print('hello')
		greet()
	# create greet function with name arg and use it in print
		def greet(name)
			print('hello ' + name)
		greet('cheng')
	# create greet function with name arg that has default value. Call it using default value
		def greet(name='bob')
			print('hello ' + name)
		greet()	
	# create a greet def with name arg. It will print hello + name if name has value, otherwise just return. Use in both instance
		def greet(name):
		    if not name:
		        return
		    print('hello ' + name)
		greet(False)
		greet('cheng')
	# create a greet def that returns a seperated values
		def greet(name):
			print('hello ' + name)
			return name, 'cheng', 8
		print(greet('syd'))
	# create greet function with first and last name arg. Call if with keyword argument
		def greet_user(first_name, last_name):
			print(f'Hi {first_name} {last_name}')
			print('Welcome aboard!')
		greet_user(last_name='John', first_name='Smith')



> routine n - nested functions - nnn
	/*
		Notes:
	*/
	# create a nested function that will print each word of a sentence in a new line
		def talk(phrase):
			def say(word):
				print(word)
			words = phrase.split(' ')
			for word in words:
				say(word)
		talk('I am going to buy the milk')



> routine n - nested functions - nonlocal
	/*
		Notes:
			nonlocal - ables us to access the outside count variable
	*/
	# create an increment counter using a nested function and nonlocal var
		def counter():
			count = 0
			def increment():
				nonlocal count
				count = count + 1
				return count
			return increment
		increment = counter()
		print(increment())
		print(increment())
		print(increment())



> routine n - lambda functions - nn
	/*
		Notes:
	*/
	# create a multiplication lambda function, use it	
		multiply = lambda num : num * 2
		print(multiply(2))



> routine n - map() - lambda functions
	/*
		Notes:
	*/
	# print a list that was doubled using map() and lambda
		numbers = [1, 2, 3]
		print(list(map(lambda a: a * 2, numbers)))



> routine n - filter() - lambda functions
	/*
		Notes:
			filter takes an iterable and returns a filter object which is another iterable but without some of the original items
	*/
	# print a filtered list of even numbers using filter() and lambda
		numbers = [1, 2, 3, 4, 5, 6]
		print(list(filter(lambda n : n % 2 == 0, numbers)))



> routine n - reduce() - lambda functions
	/*
		Notes:
			lambda a, b: a[1] + b[1]
				# 1st arg a is the accumulated value
				# 2nd arg b is the updated value from the iterable
	*/
	# create a tuple list expenses. Print the sum using reduce()
		from functools import reduce
		expenses = [
			('Dinner', 80),
			('Car repair', 120)
		]
		sum = reduce(lambda a, b: a[1] + b[1], expenses)
		print(sum)



> routine n - recursion - nn
	/*
		Notes:
	*/
	# get the factorial of a number using recursion
		def factorial(n):
			if n == 1: return 1
			return n * factorial(n-1)
		print(factorial(3))



> routine n - decorators - nn
	/*
		Notes:
	*/
	# create a sample of decorator	
		def logtime(func):
			def wrapper():
				# done before
				print("before")
				val = func()
				# done after
				print("after")
				return val
			return wrapper
		@logtime
		def hello():
			print('hello')
		hello()
		# before
		# hello
		# after



> routine n - Docstrings - nn
	/*
		Notes:
	*/
	# create a docstring sample
		def increment(n):
			"""Increment a number"""
			return n + 1
		print(help(increment))



> routine n - Annotations - nn
	/*
		Notes:
	*/
	# create a variable count and annotate it is an int 
		count: int = 0	
	# create a function that specifies it receives an int and also goint to return an int using annotations
		def increment(n: int) -> int :  
			return n + 1



> routine n - exceptions - nnn
	/*
		Notes:
			try:
				# some lines of code
			except <ERROR1>:
				# handler <ERROR1>
			except <ERROR2>:
				# handler <ERROR2>
			except:
			else:
			finally:		
	*/
	# try to get user input, create except for ValueError and ZeroDivisionError
		try:
			age = int(input(‘Age: ‘))
			print(age)
		except ValueError:
			print(‘Not a valid number’)
		except ZeroDivisionError:
			print(‘Age cannot be 0’)



> routine n - exceptions - raising
	/*
		Notes:
	*/
	# raise an Exception
		raise Exception('An error!')
	# raise an Exception and try cath it
		try:
			raise Exception('An Error!')
		except Exception as error:
			print(error)	
	# create a DogNotFoundException class and use it as raise Exception
		class DogNotFoundException(Exception):
			pass
		try:
			raise DogNotFoundException()
		except DogNotFoundException:
			print('Dog not found!')



> routine n - classes - nnn
	/*
		Notes:
	*/
	# create a class Person with a contructor that accepts a name. Also create a greet def and use it
	# assign an age propery using the object
		class Person:
			def __init__(self, name):
				self.name = name
			def greet(self):
				print("Hi, I'm " + self.name)
		person1 = Person('Cheng')
		person1.age = 10
		person1.greet()



> routine n - inheritance - nnn
	/*
		Notes:
	*/
	# create a class Dog and Cat that inherits from class Mammal that has a def of walk.
		class Mammal:
		    def walk(self):
		        print("walk")
		class Dog(Mammal):
		    def bark(self):
		        print("bark")
		class Cat(Mammal):
		    pass



> routine n - polymorphism - nnn
	/*
		Notes:
			# The word polymorphism means having many forms. 
			# In programming, polymorphism means the same function name (but different signatures) being used for different types. 
				# The key difference is the data types and number of arguments used in function.		
	*/
	# show polymorphism using len()
		print(len("geeks")) # len() being used for a string
		print(len([10, 20, 30])) # len() being used for a list
	# create a simple def and show how to use it in polymorphism
		def add(x, y, z = 0):
			return x + y + z
		print(add(2, 3))
		print(add(2, 3, 4))
	# create class India and USA with capital def that prints their capital. Use for in loop to showcase polymorphism
		class India():
			def capital(self):
				print("New Delhi")
		class USA():
			def capital(self):
				print("Washington")
		obj_ind = India()
		obj_usa = USA()
		for country in (obj_ind, obj_usa):
			country.capital()



> routine n - polymorphism - with Inheritance
	/*
		Notes:
	*/
	# create a class Bird, Sparrow, and Ostrich. Showcase polymorphism and inheritance
		class Bird:
			def intro(self):
				print("There are many types of birds.")
			def flight(self):
				print("Most of the birds can fly but some cannot.")
		class sparrow(Bird):
			def flight(self):
				print("Sparrows can fly.")
		class ostrich(Bird):
			def flight(self):
				print("Ostriches cannot fly.")
		obj_bird = Bird()
		obj_spr = sparrow()
		obj_ost = ostrich()
		obj_bird.intro()
		obj_bird.flight()
		obj_spr.intro()
		obj_spr.flight()
		obj_ost.intro()
		obj_ost.flight()
		# There are many types of birds.
		# Most of the birds can fly but some cannot.
		# There are many types of birds.
		# Sparrows can fly.
		# There are many types of birds.
		# Ostriches cannot fly.



> routine n - polymorphism - with Inheritance and Method Overriding
	/*
		Notes:
	*/
	# create class Animal, Dog, and Cat and showcase polymorphism with Inheritance and Method Overriding
		class Animal:
			def speak(self):
				raise NotImplementedError("Subclass must implement this method")
		class Dog(Animal):
			def speak(self):
				return "Woof!"
		class Cat(Animal):
			def speak(self):
				return "Meow!"
		animals = [Dog(), Cat()]
		for animal in animals:
			print(animal.speak())
		# Woof!
		# Meow!



> routine n - operator overloading - nnn
	/*
		Notes:
	*/
	# create a class that compares age of an object using operator overloading
		class Dog:
			def __init__(self, name, age):
				self.name = name
				self.age = age
			def __gt__(self, other):
				return True if self.age > other.age else False
		roger = Dog('Roger', 8)
		syd = Dog('Syd', 8)
		print(roger > syd)



> routine n - modules - nnn
	/*
		Notes:
	*/
	# converters.py
	# create lbs_to_kg and kg_to_lbs def in this file
		def lbs_to_kg(weight):
			return weight * 0.45
		def kg_to_lbs(weight):
			return weight / 0.45	
	# main.py
	# use import
		import converters
		print(converters.kg_to_lbs(70))		
	# use from and import	
		from converters import kg_to_lbs
		print(kg_to_lbs(70))



> routine n - packages - nnn
	/*
		Notes:
			- package is a container for multiple modules
			- in file system terms, a package is a directory or folder
			- so in our project we can add a new directory and in that directory we can add all the related modules
			- click project folder > create new directory > ecommerce
				- in order to convert ecommerce directory into a package, add a special file in it > __init__.py
	*/
	# use import
		import ecommerce.converters
		ecommerce.converters.kg_to_lbs(70)
	# use from and import	
		from ecommerce.converters import kg_to_lbs
		kg_to_lbs(70)



> routine n - python standard library - random
	/*
		Notes:
	*/
	# import random
		import random
	# returns a float between 0 to 1
		random.random() 
	# returns an int between 1 to 6
		random.randint(1, 6) 
	# randomly picks an item in a list
		members = [‘John’, ‘Bob’, ‘Mary’]
		leader = random.choice(members)
	# print (random int 1 to 6, random int 1 to 6)
		print(f'({random.randint(1, 6)}, {random.randint(1, 6)})')



> routine n - prog n
	/*
		Notes:
			- create a class Dice
				- create a def roll
				- return a tuple eg (random int 1 to 6, random int 1 to 6)
			- use the class
	*/
	import random
	class Dice:
		def roll(self):
			first = random.randint(1, 6)
			second = random.randint(1, 6)
			# return (first, second)  # this is a tuple
			return first, second       # this is also a tuple
	dice1 = Dice()
	print(dice1.roll())



> routine n - prog n
	/*
		Notes:
			- create a game of Rock, Paper, Scrissors
				- 1 def to get player choice
				- 1 def to check win
			- use python random.choice()
	*/
	import random
	def get_choices():
		player_choice = str(input("Enter a choice rock, paper, scissors: ")).upper()
		options = ['rock', 'paper', 'scissors']
		computer_choice = str(random.choice(options)).upper()
		final_choices = {"player": player_choice, "computer": computer_choice}
		return final_choices
	def check_win(player, computer):
		print(f"You chose: {player}, computer chose: {computer}")
		if player == computer:
			return "It's a tie"
		elif player == "rock".upper():
			if computer == "scissors".upper():
				return "Rock smashes scissors! You Win!"
			else:
				return "Paper covers rock! You Lose."
		elif player == "paper".upper():
			if computer == "scissors".upper():
				return "Scissors cuts paper! You Lose."
			else:
				return "Paper covers rock! You Win!"
		elif player == "scissors".upper():
			if computer == "paper".upper():
				return "Scissors cuts paper! You Win."
			else:
				return "Rock smashes scissors! You Lose!"
	choices = get_choices()
	print(check_win(choices["player"], choices["computer"]))



> routine n - working with directories - nnn
	/*
		Notes:
			* all files and directories
			*.* get all file in the current directory BUT not the directories
			*.py search all the py files		
			glob(), with this method, we can search for files and directories in the current path. 1st arg defines search pattern
	*/
	# import path
		from pathlib import Path
	# print current directory
		print(Path())
	# check if emails directory exist in current directory
		path = Path("ecommerce")
		print(path.exists())
	# create email directory if it does not exist, otherwise create
		path = Path("emails")
		if path.exists():
			path.rmdir()
		else:
			path.mkdir()
	# print all files with .py extension in current directory
		for file in path.glob('*.py'):
			print(file)



> routine n - pypi - nnn
	/*
		Notes:
	*/




> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



> routine n - nnn - nnn
	/*
		Notes:
	*/



