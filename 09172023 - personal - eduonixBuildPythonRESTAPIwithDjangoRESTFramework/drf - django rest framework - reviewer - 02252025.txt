drf - django rest framework - Eduonix - Build Python REST API with Django REST Framework



> pip install djangorestframework


- settings
	INSTALLED_APPS = [
		...
		'rest_framework'
	]




- serializer
	- purpose
		- converts a django model or a database table into into a format transfered into the internet such as json
		- basically in your view, you get data from your model, place the result of the model in your serializer, then place the serialize result in return response









- serializers.py
	- types of serializer
		- serializers.Serializer
			- using this you need to explicitly/manually redeclare/respecify all fields of your model
			- manually create def create and update
				from rest_framework import serializers
				from .models import Article
				class ArticleSerializer(serializers.Serializer):
					title = serializers.CharField(max_length=200)
					description = serializers.CharField()
					slug = serializsers.SlugField(read_only=True)
					published = serializers.DateTileField(read_only=True)
				def create(self, validate_data):
					return article.objects.create(**validated_data)
				def update(...)
					instance.title = ...
					instance.description = ...
					instance.slug = ...
					instance.published = ...
					instance.save()
					return instance
			- you create methods for creating and updating
		- model serializer class
			- provides a shortcut that lets you automatically create a serializer class that corresponds to the models field
			- automatically generate a set of fields for you base on the model, validators, simple create and update
			- this is what I recommend
				class ArticleSerializer(serializers.ModelSerializer):
					slug = serializers.SlugField(read_only=True)
					class Meta:
						model = Article
						# fields = ('title', 'description')
						fields = '__all__'
		











- views
	- notes
		- in DRF, the views serves as more than 1 purpose
			- a view can be used with combine for getting all articles + create single article
			- a view can be used with combine for checking/updating/deleting a specific article
			- a view can do everything base on the style you will use
		








	- function base view
		- notes
			- function base view is the only view that does NOT give you a browsable api ui
				- maybe because this is the only one that use 'return JsonResponse'. The rest of examples use 'return Response'
		- style
			- changes
				- 
			- weakness
				- manual. Creating all request.method ifs in a function
				- funciton base style
			- strengthes
				- clear. You can easily trace the what your code did
				- can easily get request data
		- views.py
			from django.shortcuts import render
			from .models import Article
			from .serializers import ArticleSerializer
			from rest_framework.parsers import JSONParser, 
			from django.http import JsonResponse, HttpResponse
			from django.views.decorators.csrf import csrf_exempt

			# view funtionc list. 2 methods
			@csrf_exempt #not recommended. for testing only
			def article_list(request):

				# get all articles
				if request.method == "GET":
					articles = Article.objects.all()
					serializer = ArticleSerializer(articles, many=True)
					return JsonResponse(serializer.data, safe=False)

				# create a single article
				elif request.method == "POST":
					data = JSONParser().parse(request)
					serializer = ArticleSerializer(data=data)
					if serializer.is_valid():
						serializer.save()
						return JsonResponse(serializer.data, status=201) # 201 means data is created 
					return JsonResponse(serializer.error, status=400)

			# check/update/delete single specific article
			@csrf_exempt #not recommended. for testing only
			def article_details(request, slug):
				try:
					article = Article.objects.get(slug=slug)
				except Article.DoesNotExist:
					return HttpResponse(status=404)

				if request.method == "GET":
					serializer = ArticleSerializer(article)
					return JsonResponse(serializer.data)
				elif request.method == "PUT":
					data = JSONParser().parse(request)
					serializer = ArticleSerializer(article, data=data)
					if serializer.is_valid():
						serrializer.save()
						return JsonResponse(serializer.data)
					return JsonResponse(serializer.errors, status=400)
				elif request.method == "DELETE":
					article.delete()
					return HttpResponse(status=204)


		- urls.py
			from django.urls import path
			from .views import article_list, article_details
			urlpatterns = [
				path('articles/', article_list),
				path('articles/<slug:slug>/', article_details),
			]

		- POST postman creating
			http://127.0.0.1:8000/articles/
			body > raw > JSON
				{
					"title": "test by postment",
					"description": ...
				}

		- PUT postman updating
			http://127.0.0.1:8000/articles/test-by-postman/
			body > raw > JSON
				{
					"slug": "test-by-postman",
					...
				}

		- DELETE postman delete
			http://127.0.0.1:8000/articles/test-by-postman/




	- api view decorator
		- notes
			- using this style will give you a browsable api UI
			- better to use this if you want to do function base
		- style
			- changes
				- decorator
			- weakness
				- manual. Creating all request.method ifs in a function
				- funciton base style
			- strengthes
				- clear. You can easily trace the what your code did
				- can easily get request data
		- views.py
			from django.shortcuts import render
			from .models import Article
			from .serializers import ArticleSerializer
			from rest_framework.parsers import JSONParser, 
			from django.http import JsonResponse, HttpResponse
			from django.views.decorators.csrf import csrf_exempt
			from rest_framework.decorators import api_view
			from rest_framework.response import Response
			from rest_framework import status

			@api_view(['GET', 'POST'])
			def article_list(request):

				# get all articles
				if request.method == "GET":
					articles = Article.objects.all()
					serializer = ArticleSerializer(articles, many=True)
					return Response(serializer.data)

				# create a single article
				elif request.method == "POST":
					data = JSONParser().parse(request)
					serializer = ArticleSerializer(data=data)
					if serializer.is_valid():
						serializer.save()
						return Response(serializer.data, status=status.HTTP_201_CREATED)
					return Response(serializer.error, status=status.HTTP_400_BAD_REQUEST)

			@api_view(['GET', 'PUT', 'DELETE'])
			def article_details(request, slug):
				try:
					article = Article.objects.get(slug=slug)
				except Article.DoesNotExist:
					return Response(status=status.HTTP_404_NOT_FOUND)

				if request.method == "GET":
					serializer = ArticleSerializer(article)
					return Response(serializer.data)
				elif request.method == "PUT":
					data = JSONParser().parse(request)
					serializer = ArticleSerializer(article, data=data)
					if serializer.is_valid():
						serrializer.save()
						return Response(serializer.data)
					return Response(serializer.errors, status=400_BAD_REQUEST)
				elif request.method == "DELETE":
					article.delete()
					return Response(status=status.HTTP_204_NO_CONTENT)


		- urls.py
			from django.urls import path
			from .views import article_list, article_details
			urlpatterns = [
				path('articles/', article_list),
				path('articles/<slug:slug>/', article_details),
			]

		- POSTMAN
			- most of the time he use the browsable api of drf starting at this point




	- class based api view
		- notes
			- using this style will give you a browsable api UI
		- style
			- changes
				- using class rather than function
				- no decorator
				- inherits to APIView
			- weakness
				- manual. Need to create each method for each verb of api
			- strengthes
				- single inherit
				- clear. You can easily trace the what your code did
				- can easily get request data
		- views.py
			from django.shortcuts import render
			from .models import Article
			from .serializers import ArticleSerializer
			from rest_framework.parsers import JSONParser, 
			from django.http import JsonResponse, HttpResponse, Http404
			from django.views.decorators.csrf import csrf_exempt
			from rest_framework.decorators import api_view
			from rest_framework.response import Response
			from rest_framework import status
			from rest_famework.views import APIView


			
			class ArticleList(APIView):
				def get(self, request):
					articles = Article.objects.all()
					serializer = ArticleSerializer(articles, many=True)
					return Response(serializer.data)

				def post(self, request):
					serializer = ArticleSerializer(data = request.data)
					if serializer.is_valid():
						serializer.save()
						return Response(serializer.data, status=status.HTTP_201_CREATED)
					return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

			class ArticleDetals(APIView):
				def get_object(self, slug):
					try:
						return Article.objects.get(slug=slug)
					except Article.DoesNotExist:
						raise Http404

				def get(self, request, slug):
					article = self.get_object(slug)
					serializer = ArticleSerializer(article)
					return Response(serializer.data)

				def put(self, request, slug):
					article = self.get_object(slug)
					serializer = ArticleSerializer(article, data=request.data)
					if serializer.is_valid():
						serializer.save()
						return Response(serializer.data)
					return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

				def delete(self, request, slug):
					article = self.get_object(slug)
					article.delete()
					return Response(status=status.HTTP_204_NO_CONTENT)


		- urls.py
			from django.urls import path
			from .views import ArticleList, ArticleDetails
			urlpatterns = [
				path('articles/', ArticleList.as_view()),
				path('articles/<slug:slug>', ArticleDetails.as_view()),
			]

		- POSTMAN
			- most of the time he use the browsable api of drf starting at this point






	- mixin style
		- notes
			- using this style will give you a browsable api UI
		- style
			- changes
				- use class
				- no decorator
				- inherits to multiple mixins
			- weakness
				- manual. Need to create each method for each verb of api
				- multiple mixin inherits
				- high level code inside verb methods
					- might be harder to debug
					- it seems halfbake shortcut
			- strengthes
				- high level, less code inside each verb methods
		- views.py
			from django.shortcuts import render
			from .models import Article
			from .serializers import ArticleSerializer
			from rest_framework.parsers import JSONParser, 
			from django.http import JsonResponse, HttpResponse, Http404
			from django.views.decorators.csrf import csrf_exempt
			from rest_framework.decorators import api_view
			from rest_framework.response import Response
			from rest_framework import status
			from rest_famework.views import APIView
			from rest_framework import mixins
			from rest_framework import generics


			
			class ArticleList(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView):
				queryset = Article.objects.all()
				serializer_class = ArticleSerializer

				def get(self, request, *args, **kwargs):
					return self.list(request, *args, **kwargs)

				def post(self, request, *args, **kwargs):
					return self.create(request, *args, **kwargs)

			class ArticleDetails(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, generics.GenericAPIView):
				queryset = Article.objects.all()
				serializer_class = ArticleSerializer
				lookup_field = 'slug'

				def get(self, request, *args, **kwargs):
					return self.retrieve(request, *args, **kwargs)

				def put(self, request, *args, **kwargs):
					return self.update(request, *args, **kwargs)

				def delete(self, request, *args, **kwargs):
					return self.destroy(request, *args, **kwargs)


		- urls.py
			from django.urls import path
			from .views import ArticleList, ArticleDetails
			urlpatterns = [
				path('articles/', ArticleList.as_view()),
				path('articles/<slug:slug>', ArticleDetails.as_view()),
			]

		- POSTMAN
			- most of the time he use the browsable api of drf starting at this point



	- generics style
		- notes
			- using this style will give you a browsable api UI
		- style
			- changes
				- use class
				- no decorator
				- single inherit
			- weakness
				- high level code for each class
					- make it hard to debug if you forget
				- no verbs in each class
					- make it hard to debug if you forget
			- strengthes
				- single inherit
				- high level, less code inside each verb methods
		- views.py
			from django.shortcuts import render
			from .models import Article
			from .serializers import ArticleSerializer
			from rest_framework.parsers import JSONParser, 
			from django.http import JsonResponse, HttpResponse, Http404
			from django.views.decorators.csrf import csrf_exempt
			from rest_framework.decorators import api_view
			from rest_framework.response import Response
			from rest_framework import status
			from rest_famework.views import APIView
			from rest_framework import mixins
			from rest_framework import generics


			
			class ArticleList(generics.ListCreateAPIView):
				queryset = Article.objects.all()
				serializer_class = ArticleSerializer
				

			class ArticleDetails(generics.RetrieveUpdateDestroyAPIView):
				lookup_field = 'slug'
				queryset = Article.objects.all()
				serializer_class = ArticleSerializer


		- urls.py
			from django.urls import path
			from .views import ArticleList, ArticleDetails
			urlpatterns = [
				path('articles/', ArticleList.as_view()),
				path('articles/<slug:slug>', ArticleDetails.as_view()),
			]

		- POSTMAN
			- most of the time he use the browsable api of drf starting at this point






	- viewsets & routers style
		- notes
			- using this style will give you a browsable api UI
		- style
			- changes
				- improve code in urls.py to make it dry
				- use class
				- no decorator
				- single inherit
			- weakness
				- making urls.py dry might not be good for pages that has unusual url structure
			- strengthes
				- single inherit
				- 1 method per verb in the class?
				- can see code for each verb in the class for easy edit and debugging?
		- views.py
			from django.shortcuts import render
			from .models import Article
			from .serializers import ArticleSerializer
			from rest_framework.parsers import JSONParser, 
			from django.http import JsonResponse, HttpResponse, Http404
			from django.views.decorators.csrf import csrf_exempt
			from rest_framework.decorators import api_view
			from rest_framework.response import Response
			from rest_framework import status
			from rest_famework.views import APIView
			from rest_framework import mixins
			from rest_framework import generics
			from rest_framework import viewsets

			class ArticleViewSet(viewsets.ViewSet):
				def list(self, request):
					articles = Aritlce.objects.all()
					serializer = ArticleSerializer(articles, many=True)
					return Response(serializer.data)
				def create(self, request):
					serializer = ArticleSerializer(data = request.data)
					if serializer.is_valid():
						serializer.save()
						return Response(serializer.data, status=status.HTTP_201_created)
					return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
				...



		- urls.py
			from django.urls import path, include
			from .views import ArticleViewSet
			from rest_framework.routers import DefaultRouter

			router = DefaultRouter()
			router.register('articles', ArticleViewSet, basename='articles')

			# one router do it all
			urlpatterns = [
				path('api/', include(router.urls))
			]

		- POSTMAN
			- most of the time he use the browsable api of drf starting at this point

		- url
			domain.com/api/articles






	- generic viewsets & routers style
		- notes
			- using this style will give you a browsable api UI
		- style
			- changes
				- only 1 single class in view to do all actions but inherits to all
				- not passing arguments at ArticleSerializer anymore
			- weakness
				- making urls.py dry might not be good for pages that has unusual url structure
				- multiple inherits for single class
				- not passing arguments at ArticleSerializer anymore making you forget
				- might be hard to debug for each verb
				- might be hard to separate concerns for each verb since its just using a single class
			- strengthes
				- high level single class for all
					- great for simple models that does not need unique flow of crud:
						- salescategory
							- simple crud. No attached details unlike a Purchase or a Sales or a Official Receipt
						- salesstatus
		- views.py
			from django.shortcuts import render
			from .models import Article
			from .serializers import ArticleSerializer
			from rest_framework.parsers import JSONParser, 
			from django.http import JsonResponse, HttpResponse, Http404
			from django.views.decorators.csrf import csrf_exempt
			from rest_framework.decorators import api_view
			from rest_framework.response import Response
			from rest_framework import status
			from rest_famework.views import APIView
			from rest_framework import mixins
			from rest_framework import generics
			from rest_framework import viewsets

			# one class do it all
			class ArticleViewSet(viewsets.GenericViewSet, mixins.ListModelMixin,
								mixins.CreateModelMixin, mixins.RetrieveModelMixin,
								mixins.UpdateModelMixin, mixins.DestroyModelMixin):
				lookup_field = 'slug'
				queryset = Article.objects.all()
				serializer_class = ArticleSerializer

		- urls.py
			from django.urls import path, include
			from .views import ArticleViewSet
			from rest_framework.routers import DefaultRouter

			router = DefaultRouter()
			router.register('articles', ArticleViewSet, basename='articles')

			# one router do it all
			urlpatterns = [
				path('api/', include(router.urls))
			]

		- POSTMAN
			- most of the time he use the browsable api of drf starting at this point

		- url
			domain.com/api/articles







	- model viewsets & routers style
		- notes
			- using this style will give you a browsable api UI
		- style
			- changes
				- only 1 single class in view to do all actions with single inherit
				- not passing arguments at ArticleSerializer anymore
			- weakness
				- making urls.py dry might not be good for pages that has unusual url structure
				- might be hard to debug for each verb
				- not passing arguments at ArticleSerializer anymore making hard to debug if you forget
				- might be hard to separate concerns for each verb since its just using a single class
			- strengthes
				- high level single class for all
					- great for simple models that does not need unique flow of crud:
						- salescategory
							- simple crud. No attached details unlike a Purchase or a Sales or a Official Receipt
						- salesstatus
		- views.py
			from django.shortcuts import render
			from .models import Article
			from .serializers import ArticleSerializer
			from rest_framework.parsers import JSONParser, 
			from django.http import JsonResponse, HttpResponse, Http404
			from django.views.decorators.csrf import csrf_exempt
			from rest_framework.decorators import api_view
			from rest_framework.response import Response
			from rest_framework import status
			from rest_famework.views import APIView
			from rest_framework import mixins
			from rest_framework import generics
			from rest_framework import viewsets

			# one class do it all
			class ArticleViewSet(viewsets.ModelViewSet):
				queryset = Article.objects.all()
				serializer_class = ArticleSerializer
				lookup_field = 'slug'

		- urls.py
			from django.urls import path, include
			from .views import ArticleViewSet
			from rest_framework.routers import DefaultRouter

			router = DefaultRouter()
			router.register('articles', ArticleViewSet, basename='articles')

			# one router do it all
			urlpatterns = [
				path('api/', include(router.urls))
			]

		- POSTMAN
			- most of the time he use the browsable api of drf starting at this point

		- url
			domain.com/api/articles




























authentication
video basing at
	django-rest-framework.org/api-guide/authentication
		BasicAuthentication
			only good for testing, not for production
		TokenAuthentication
			use in the video
		SessionAuthentication
	django-rest-framework.org/api-guide/permissions



install
	# use for registering new user
		# although i did not use this in my first api market sample together with djangolar base on the code that I see in github
		# video base on documentation at dj-rest-auth.readthedocs.io/en/latest/installation.html
	> pip install dj-rest-auth 
	> pip install django-allauth



model
	from django.db import models
	from django.contrib.auth.models import User

	class Article(models.Model):
		title = models.CharField(max_length=200)
		description = models.TextField()
		slug = models.SlugField(max_length=200)
		published = models.DateTimeField(auto_now_add=True)
		author = models.ForeignKey(User, on_delete=models.CASCADE)

		def __str__(self):
			return self.title


serializer
	from .models import Article

	class ArticleSerializer(serializers.ModelSerializer):
		slug = serializers.SlugField(read_only=True)
		# this will show author username rather than is user id
		author = serializers.StringRelatedField()
		class Meta:
			model = Article
			fields = '__all__'



settings
	INSTALLED_APPS = [
		...
		'rest_framework'
		'rest_framework.authtoken'


		# use for registering new user
			# although i did not use this in my first api market sample together with djangolar base on the code that I see in github
		'dj_rest_auth', 
		'django.contrib.sites',
		'allauth',
		'allauth.account',
		'allauth.socialaccount',
		'dj_rest_auth.registration',

	]

	# use for registering new user
			# although i did not use this in my first api market sample together with djangolar base on the code that I see in github
	SITE_ID = 1
	ACCOUNT_EMAIL_VERIFICATION = 'none'
	ACCOUNT_AUTHENTICATION_METHOD = 'username'
	ACCOUNT_EMAIL_REQUIRED = False

	# use this style below if you want to set globally so that you don't need to set anything for each class for your api
	REST_FRAMEWORK = {
		# make authentication token style
		'DEFAULT_AUTHENTICATION_CLASSES': [
			'rest_framework.authentication.TokenAuthentication'
		],

		# this makes all view class require permissions
		# use the other one in the documentation for manual specific class permission
		# 'DEFAULT_PERMISSION_CLASSES': [
		# 	'rest_framework.permissions.IsAuthenticated'
		# ]
	}






views
	from rest_framework import viewsets
	from rest_framework.authentication import TokenAuthentication
	from rest_framework.permissions import IsAuthenticated

	class ArticleViewSet(viewsets.ModelViewSet):
		queryset = Article.objects.all()
		serializer_class = ArticleSerializer
		lookup_field = 'slug'
		# comment this to use global settings for token authentication
		# authentication_classes = (TokenAuthentication, )
		# below is how you use manually rather than setting it globally in settings.py
		permission_classes = [IsAuthenticated]

		# you only need to add this if you need to modify default behavior
		def perform_create(self, serializer):
			# do this for foreign keys
			serializer.save(author = self.request.user)




core urls.py
	from django.contrib import admin
	from django.urls import path, include

	urlpatterns = [
		path('admin/', admin.site.urls),
		path('', include('backend.urls')),
		# this will show the login/username on the upper right of drf browsable api
		path('api-auth/', include('rest_framework.urls')),

		# use for registering new user
			# although i did not use this in my first api market sample together with djangolar base on the code that I see in github
		path('dj-rest-auth/', include('dj_rest_auth.urls')),
		path('dj-rest-auth/registration', include('dj_rest_auth.registration.urls')),
	]





terminal
	python manage.py migrate




token
	manual add token
		admin > auth token > add token







add token for old user. Skips user with existing token
	python manage.py shell
	from django.contrib.auth.models import User
	from rest_framework.authtoken.models import Token

	for user in User.objects.all():
	    Token.objects.get_or_create(user=user)



generate token for specific user
	./manage.py drf_create_token <username>

regenerate token for specific user
	./manage.py drf_create_token -r <username>



auto generate token when creating user
	signal
		@receiver(post_save, sender=settings.AUTH_USER_MODEL)
		def create_auth_token(sender, instance=None, created=False, **kwargs):
		    if created:
		        Token.objects.create(user=instance)



postman test authentication using token
	GET
	http://127.0.0.1:8000/api/articles/
	headers
		key
			Authorization
		value
			Token 679.........

	POST
	http://127.0.0.1:8000/api/articles/
	headers
		key
			Authorization
		value
			Token 679.........
	body
		raw
			json
				{
					"title": "......",
					"description": "......."
				}




registration
	domain.com/dj-rest-auth/registration/




make sure only author can update/delete their own article
	backend/permissions.py
		from rest_framework import permissions

		class IsAuthor(permissions.BasePermission):
			def has_object_permission(self, request, view, obj):
				if request.method in permissions.SAFE_METHODS:
					return True
				return obj.author == request.user


	backend/views.py
		from rest_framework import viewsets
		from rest_framework.permissions import IsAuthenticated
		from .permissions import IsAuthor
		class ArticleViewSet(viewsets.ModelViewSet):
			queryset = Article.objects.all()
			serializer_class = ArticleSerializer
			lookup_field = 'slug'
			permission_classes = [IsAuthenticated, IsAuthor]

			def perform_create(self, serializer):
				serializer.save(author = self.request.user)
