



> routine n - n
	> desc	
	> 





----------------------------------------------------------------




> routine n - install
	> desc
		- "fastapi[standard]" comes with some default optional standard dependencies
		- pip install fastapi if you don't want to have those optional dependencies 		
	> 




> pip install "fastapi[standard]"








----------------------------------------------------------------




> routine n - basics
	> desc	
	> 


from fastapi import FastAPI

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}



/ is index


----------------------------------------------------------------




> routine n - run your code
	> desc	
	> 


> fastapi dev main.py


Server started at 	http://127.0.0.1:8000
Documentation at 	http://127.0.0.1:8000/docs
Alternative Doc 	http://127.0.0.1:8000/redoc



----------------------------------------------------------------




> routine n - path parameters
	> desc	
	> 



@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}



http://127.0.0.1:8000/items/foo







----------------------------------------------------------------




> routine n - path parameters force types
	> desc	
	> 



@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}


http://127.0.0.1:8000/items/1


----------------------------------------------------------------




> routine n - Pydantic
	> desc	
		All the data validation is performed under the hood by Pydantic
	> 









----------------------------------------------------------------




> routine n - Order matters
	> desc	
	> 



@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}





----------------------------------------------------------------




> routine n - predefined enum
	> desc	
		- By inheriting from str the API docs will be able to know that the values must be of type string and will be able to render correctly.
	> 


from enum import Enum
from fastapi import FastAPI

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"

app = FastAPI()

@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}

    return {"model_name": model_name, "message": "Have some residuals"}



http://127.0.0.1:8000/models/resnet






----------------------------------------------------------------




> routine n - path parameter
	> desc	
	> 



@app.get("/files/{file_path:path}") 		<- :path
async def read_file(file_path: str): 		<- :str
    return {"file_path": file_path}




/files//home/johndoe/myfile.txt, with a double slash (//)
	http://127.0.0.1:8000/files//home/johndoe/myfile.txt


/home/johndoe/myfile.txt, with a leading slash (/)
	http://127.0.0.1:8000/home/johndoe/myfile.txt








----------------------------------------------------------------




> routine n - Query Parameters
	> desc	
		- When you declare other function parameters that are not part of the path parameters, they are automatically interpreted as "query" parameters.
	> 


fake_items_db = [{"item_name": "Foo"}, {"item_name": "Bar"}, {"item_name": "Baz"}]

@app.get("/items/")
async def read_item(skip: int = 0, limit: int = 10):
    return fake_items_db[skip : skip + limit]




http://127.0.0.1:8000/items/
	is the same as
http://127.0.0.1:8000/items/?skip=0&limit=10



http://127.0.0.1:8000/items/?skip=20
	is the same as
http://127.0.0.1:8000/items/?skip=20&limit=10







----------------------------------------------------------------




> routine n - Optional parameters
	> desc	
	> 



@app.get("/items/{item_id}")
async def read_item(item_id: str, q: str | None = None):
    if q:
        return {"item_id": item_id, "q": q}
    return {"item_id": item_id}





# old/other version
async def read_item(item_id: str, q: Union[str, None] = None):









----------------------------------------------------------------




> routine n - Query parameter type conversion
	> desc	
	> 




@app.get("/items/{item_id}")
async def read_item(item_id: str, q: str | None = None, short: bool = False):
    item = {"item_id": item_id}
    if q:
        item.update({"q": q})
    if not short:
        item.update(
            {"description": "This is an amazing item that has a long description"}
        )
    return item



http://127.0.0.1:8000/items/foo?short=1
http://127.0.0.1:8000/items/foo?short=True
http://127.0.0.1:8000/items/foo?short=true
http://127.0.0.1:8000/items/foo?short=on
http://127.0.0.1:8000/items/foo?short=yes








----------------------------------------------------------------




> routine n - Multiple path and query parameters
	> desc	
		- You can declare multiple path parameters and query parameters at the same time, FastAPI knows which is which.
		- And you don't have to declare them in any specific order.	
	> 


@app.get("/users/{user_id}/items/{item_id}")
async def read_user_item(user_id: int, item_id: str, q: str | None = None, short: bool = False):
    item = {"item_id": item_id, "owner_id": user_id}
    if q:
        item.update({"q": q})
    if not short:
        item.update({"description": "This is an amazing item that has a long description"})
    return item








----------------------------------------------------------------




> routine n - Required query parameters
	> desc	
	> 


@app.get("/items/{item_id}")
async def read_user_item(item_id: str, needy: str):
    item = {"item_id": item_id, "needy": needy}
    return item


http://127.0.0.1:8000/items/foo-item?needy=sooooneedy    














----------------------------------------------------------------




> routine n - Import Pydantic's BaseModel
	> desc	
	> 


from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

app = FastAPI()

@app.post("/items/")
async def create_item(item: Item):
    item_dict = item.dict()
    if item.tax is not None:
        price_with_tax = item.price + item.tax
        item_dict.update({"price_with_tax": price_with_tax})
    return item_dict

@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.dict()}




# other version
class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None











----------------------------------------------------------------




> routine n - Request body + path + query parameters
	> desc	
	> 



from fastapi import FastAPI
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


app = FastAPI()


@app.put("/items/{item_id}")
async def update_item(item_id: int, item: Item, q: str | None = None):
    result = {"item_id": item_id, **item.dict()}
    if q:
        result.update({"q": q})
    return result











----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




> routine n - n
	> desc	
	> 









----------------------------------------------------------------




