mkdir flask_project01
cd flask_project01

# Create virtual environment
python -m venv venv
venv\Scripts\activate  # or source venv/bin/activate on Linux/Mac

# Install dependencies
pip install flask flask-sqlalchemy flask-migrate flask-login flask-wtf email-validator psycopg2-binary

# Save them
pip freeze > requirements.txt






Project Layout (after blueprint split)
flask_project01/
│
├── app/
│   ├── __init__.py         # app factory lives here
│   ├── extensions.py       # (optional) for db, login_manager, etc.
│   │
│   ├── accounts/           # like Django’s "accounts" app
│   │   ├── __init__.py
│   │   ├── routes.py
│   │   ├── models.py
│   │   └── forms.py
│   │
│   ├── posts/              # like Django’s "posts" app
│   │   ├── __init__.py
│   │   ├── routes.py
│   │   ├── models.py
│   │   └── forms.py
│   │
│   └── templates/
│       ├── base.html
│       ├── accounts/
│       │   ├── login.html
│       │   └── register.html
│       │   └── profile.html
│       └── posts/
│           └── index.html
│           └── edit_post.html
│
├── migrations/             # flask-migrate will create this
├── venv/                   # virtual environment
├── config.py               # config classes (Dev, Prod, etc.)
├── run.py                  # entrypoint
└── requirements.txt




-----------------------------------------------
create database
-----------------------------------------------
CREATE DATABASE flaskdb01;
CREATE USER flask_user WITH PASSWORD 'mypassword';
GRANT ALL PRIVILEGES ON DATABASE flaskdb01 TO flask_user;
\c flaskdb01;
-- fix schema privileges
GRANT ALL ON SCHEMA public TO flask_user;
ALTER ROLE flask_user SET search_path TO public;






-----------------------------------------------
config.py
-----------------------------------------------
import os

BASE_DIR = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = "supersecretkey"
    SQLALCHEMY_DATABASE_URI = "postgresql://flask_user:mypassword@localhost:5432/flaskdb01"
    SQLALCHEMY_TRACK_MODIFICATIONS = False

class DevConfig(Config):
    DEBUG = True

class ProdConfig(Config):
    DEBUG = False




-----------------------------------------------
Create App Factory (app/__init__.py)
-----------------------------------------------
from flask import Flask
from app.extensions import db, migrate, login_manager

def create_app(config_class="config.DevConfig"):
    app = Flask(__name__)
    app.config.from_object(config_class)

    # Initialize extensions
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)

    # Register blueprints
    from app.accounts.routes import accounts_bp
    from app.posts.routes import posts_bp
    app.register_blueprint(accounts_bp, url_prefix="/accounts")
    # app.register_blueprint(posts_bp, url_prefix="/posts")
    app.register_blueprint(posts_bp, url_prefix="/")

    return app





-----------------------------------------------
app/extensions.py
-----------------------------------------------
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager

db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()
login_manager.login_view = "accounts.login"   # redirect if not logged in
login_manager.login_message_category = "warning"





-----------------------------------------------
accounts/models.py
-----------------------------------------------
from flask_login import UserMixin
from app.extensions import db, login_manager
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime

class User(UserMixin, db.Model):   # <-- Add UserMixin
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(512), nullable=False)
    first_name = db.Column(db.String(64))
    last_name = db.Column(db.String(64))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    posts = db.relationship("Post", backref="author", lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f"<User {self.username}>"


# make sure it’s at the bottom of accounts/models.py (not before User is defined).
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))







-----------------------------------------------
posts/models.py
-----------------------------------------------
from datetime import datetime
from app.extensions import db

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)

    def __repr__(self):
        return f"<Post {self.title}>"




-----------------------------------------------
accounts/forms.py
-----------------------------------------------
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Email, EqualTo, Length

class RegisterForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired(), Length(min=3, max=64)])
    email = StringField("Email", validators=[DataRequired(), Email()])
    password = PasswordField("Password", validators=[DataRequired(), Length(min=6)])
    confirm_password = PasswordField("Confirm Password", validators=[DataRequired(), EqualTo("password")])
    submit = SubmitField("Register")

class ProfileUpdateForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired(), Length(min=3, max=64)])
    email = StringField("Email", validators=[DataRequired(), Email()])
    first_name = StringField("First Name")
    last_name = StringField("Last Name")
    submit = SubmitField("Update Profile")

class LoginForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired()])
    password = PasswordField("Password", validators=[DataRequired()])
    submit = SubmitField("Login")



-----------------------------------------------
posts/forms.py
-----------------------------------------------
from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField, SubmitField
from wtforms.validators import DataRequired, Length

class PostForm(FlaskForm):
    title = StringField("Title", validators=[DataRequired(), Length(max=200)])
    content = TextAreaField("Content", validators=[DataRequired()])
    submit = SubmitField("Publish")




-----------------------------------------------
app/accounts/routes.py
-----------------------------------------------
from flask import Blueprint, render_template, redirect, url_for, flash, request
from flask_login import login_user, logout_user, login_required, current_user
from app import db
from app.accounts.forms import RegisterForm, ProfileUpdateForm, LoginForm
from app.accounts.models import User
from werkzeug.security import check_password_hash

accounts_bp = Blueprint("accounts", __name__, template_folder="templates")

@accounts_bp.route("/register", methods=["GET", "POST"])
def register():
    if current_user.is_authenticated:
        return redirect(url_for("posts.index"))

    form = RegisterForm()
    if form.validate_on_submit():
        user = User(username=form.username.data, email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash("Account created! You can now log in.", "success")
        return redirect(url_for("accounts.login"))
    return render_template("accounts/register.html", form=form)

@accounts_bp.route("/login", methods=["GET", "POST"])
def login():
    if current_user.is_authenticated:
        return redirect(url_for("posts.index"))

    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            login_user(user)
            flash("Logged in successfully!", "success")
            return redirect(url_for("posts.index"))
        else:
            flash("Invalid username or password", "danger")
    return render_template("accounts/login.html", form=form)

@accounts_bp.route("/logout")
@login_required
def logout():
    logout_user()
    flash("You have been logged out.", "info")
    return redirect(url_for("accounts.login"))

@accounts_bp.route("/profile", methods=["GET", "POST"])
@login_required
def profile():
    form = ProfileUpdateForm(obj=current_user)
    if form.validate_on_submit():
        current_user.username = form.username.data
        current_user.email = form.email.data
        current_user.first_name = form.first_name.data
        current_user.last_name = form.last_name.data
        db.session.commit()
        flash("Profile updated!", "success")
        return redirect(url_for("accounts.profile"))
    return render_template("accounts/profile.html", form=form)



-----------------------------------------------
app/posts/routes.py
-----------------------------------------------
from flask import Blueprint, render_template, redirect, url_for, flash, request, abort
from flask_login import login_required, current_user
from app import db
from app.posts.forms import PostForm
from app.posts.models import Post

posts_bp = Blueprint("posts", __name__, template_folder="templates")

@posts_bp.route("/", methods=["GET"])
def index():
    posts = Post.query.order_by(Post.created_at.desc()).all()
    return render_template("posts/index.html", posts=posts)

@posts_bp.route("/new", methods=["GET", "POST"])
@login_required
def new_post():
    form = PostForm()
    if form.validate_on_submit():
        post = Post(
            title=form.title.data,
            content=form.content.data,
            author=current_user
        )
        db.session.add(post)
        db.session.commit()
        flash("Post created!", "success")
        return redirect(url_for("posts.index"))
    return render_template("posts/new_post.html", form=form)

@posts_bp.route("/<int:post_id>/edit", methods=["GET", "POST"])
@login_required
def edit_post(post_id):
    post = Post.query.get_or_404(post_id)
    if post.author != current_user:
        abort(403)

    form = PostForm(obj=post)
    if form.validate_on_submit():
        post.title = form.title.data
        post.content = form.content.data
        db.session.commit()
        flash("Post updated!", "success")
        return redirect(url_for("posts.index"))
    return render_template("posts/edit_post.html", form=form)

@posts_bp.route("/<int:post_id>/delete", methods=["POST"])
@login_required
def delete_post(post_id):
    post = Post.query.get_or_404(post_id)
    if post.author != current_user:
        abort(403)

    db.session.delete(post)
    db.session.commit()
    flash("Post deleted.", "info")
    return redirect(url_for("posts.index"))





-----------------------------------------------
Entrypoint (run.py)
-----------------------------------------------
from app import create_app

app = create_app("config.DevConfig")

if __name__ == "__main__":
    app.run()












-----------------------------------------------
base.html
-----------------------------------------------
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{% block title %}Flask Blog{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  </head>
  <body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
      <div class="container">
        <a class="navbar-brand" href="{{ url_for('posts.index') }}">Flask Blog</a>
        <div class="collapse navbar-collapse">
          <ul class="navbar-nav ms-auto">
            {% if current_user.is_authenticated %}
              <li class="nav-item"><a class="nav-link" href="{{ url_for('accounts.profile') }}">Profile</a></li>
              <li class="nav-item"><a class="nav-link" href="{{ url_for('accounts.logout') }}">Logout</a></li>
            {% else %}
              <li class="nav-item"><a class="nav-link" href="{{ url_for('accounts.login') }}">Login</a></li>
              <li class="nav-item"><a class="nav-link" href="{{ url_for('accounts.register') }}">Register</a></li>
            {% endif %}
          </ul>
        </div>
      </div>
    </nav>

    <div class="container">
      {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
          {% for category, message in messages %}
            <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
              {{ message }}
              <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
          {% endfor %}
        {% endif %}
      {% endwith %}

      {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
















-----------------------------------------------
accounts/register.html
-----------------------------------------------
{% extends "base.html" %}
{% block title %}Register{% endblock %}
{% block content %}
<h2>Register</h2>
<form method="POST">
  {{ form.hidden_tag() }}
  <div class="mb-3">{{ form.username.label }} {{ form.username(class="form-control") }}</div>
  <div class="mb-3">{{ form.email.label }} {{ form.email(class="form-control") }}</div>
  <div class="mb-3">{{ form.password.label }} {{ form.password(class="form-control") }}</div>
  <div class="mb-3">{{ form.confirm_password.label }} {{ form.confirm_password(class="form-control") }}</div>
  {{ form.submit(class="btn btn-primary") }}
</form>

<p class="mt-3">
  Already have an account? 
  <a href="{{ url_for('accounts.login') }}">Login here</a>
</p>
{% endblock %}
















-----------------------------------------------
accounts/login.html
-----------------------------------------------
{% extends "base.html" %}
{% block title %}Login{% endblock %}
{% block content %}
<h2>Login</h2>
<form method="POST">
  {{ form.hidden_tag() }}
  <div class="mb-3">{{ form.username.label }} {{ form.username(class="form-control") }}</div>
  <div class="mb-3">{{ form.password.label }} {{ form.password(class="form-control") }}</div>
  {{ form.submit(class="btn btn-primary") }}
</form>

<p class="mt-3">
  Don’t have an account? 
  <a href="{{ url_for('accounts.register') }}">Register here</a>
</p>
{% endblock %}



















-----------------------------------------------
accounts/profile.html
-----------------------------------------------
{% extends "base.html" %}
{% block title %}Profile{% endblock %}
{% block content %}
<h2>Update Profile</h2>
<form method="POST">
  {{ form.hidden_tag() }}
  <div class="mb-3">{{ form.username.label }} {{ form.username(class="form-control") }}</div>
  <div class="mb-3">{{ form.email.label }} {{ form.email(class="form-control") }}</div>
  <div class="mb-3">{{ form.first_name.label }} {{ form.first_name(class="form-control") }}</div>
  <div class="mb-3">{{ form.last_name.label }} {{ form.last_name(class="form-control") }}</div>
  {{ form.submit(class="btn btn-success") }}
</form>
{% endblock %}
















-----------------------------------------------
posts/index.html
-----------------------------------------------
{% extends "base.html" %}
{% block title %}Posts{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center mb-3">
  <h2>All Posts</h2>
  {% if current_user.is_authenticated %}
    <a href="{{ url_for('posts.new_post') }}" class="btn btn-primary">New Post</a>
  {% endif %}
</div>

{% for post in posts %}
  <div class="card mb-3">
    <div class="card-body">
      <h5 class="card-title">{{ post.title }}</h5>
      <p class="card-text">{{ post.content }}</p>
      <p class="text-muted">
        By {{ post.author.username }} on {{ post.created_at.strftime('%Y-%m-%d') }}
      </p>
      {% if current_user == post.author %}
        <a href="{{ url_for('posts.edit_post', post_id=post.id) }}" class="btn btn-sm btn-warning">Edit</a>
        <form action="{{ url_for('posts.delete_post', post_id=post.id) }}" method="POST" class="d-inline">
          <button type="submit" class="btn btn-sm btn-danger">Delete</button>
        </form>
      {% endif %}
    </div>
  </div>
{% else %}
  <p>No posts yet.</p>
{% endfor %}
{% endblock %}










-----------------------------------------------
posts/new_post.html
-----------------------------------------------
{% extends "base.html" %}
{% block title %}New Post{% endblock %}
{% block content %}
<h2>Create New Post</h2>
<form method="POST">
  {{ form.hidden_tag() }}
  <div class="mb-3">
    {{ form.title.label(class="form-label") }}
    {{ form.title(class="form-control") }}
  </div>
  <div class="mb-3">
    {{ form.content.label(class="form-label") }}
    {{ form.content(class="form-control", rows=5) }}
  </div>
  <button type="submit" class="btn btn-success">Create</button>
  <a href="{{ url_for('posts.index') }}" class="btn btn-secondary">Cancel</a>
</form>
{% endblock %}










-----------------------------------------------
posts/edit_post.html
-----------------------------------------------
{% extends "base.html" %}
{% block title %}Edit Post{% endblock %}
{% block content %}
<h2>{{ "Edit" if post else "New" }} Post</h2>
<form method="POST">
  {{ form.hidden_tag() }}
  <div class="mb-3">{{ form.title.label }} {{ form.title(class="form-control") }}</div>
  <div class="mb-3">{{ form.content.label }} {{ form.content(class="form-control", rows=5) }}</div>
  {{ form.submit(class="btn btn-success") }}
</form>
{% endblock %}


















-----------------------------------------------
migrations
-----------------------------------------------
flask db init → creates a migrations/ folder (only once).
flask db migrate → scans your models (User, Post) and generates a migration script.
flask db upgrade → applies it to Postgres and actually creates the tables.



flask db init
flask db migrate -m "Initial migration"
flask db upgrade


---

update
flask db migrate -m "Expand password_hash field size"
flask db upgrade











-----------------------------------------------
Run the Server
-----------------------------------------------

flask run














-----------------------------------------------
-----------------------------------------------


















-----------------------------------------------
-----------------------------------------------
















-----------------------------------------------
-----------------------------------------------

















-----------------------------------------------
-----------------------------------------------


















-----------------------------------------------
-----------------------------------------------
















-----------------------------------------------
-----------------------------------------------

















-----------------------------------------------
-----------------------------------------------


















-----------------------------------------------
-----------------------------------------------
















-----------------------------------------------
-----------------------------------------------

















-----------------------------------------------
-----------------------------------------------


















